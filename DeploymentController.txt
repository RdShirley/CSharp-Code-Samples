using Microsoft.AspNetCore.Mvc;
using Microsoft.Web.Administration;
using System.IO.Compression;
using System.Net.Http.Headers;
using System.Security.Cryptography;
using DeploymentSystemRest.EntityModels;
using System.Text;
using Newtonsoft.Json;
using Microsoft.Data.SqlClient;
using Microsoft.SqlServer.Management.Common;
using Microsoft.SqlServer.Management.Smo;
using System.DirectoryServices.AccountManagement;
using Aes = System.Security.Cryptography.Aes;
using System.Data;
using Microsoft.Win32.TaskScheduler;
using System.Text.RegularExpressions;
using System.CodeDom;
using System.DirectoryServices.ActiveDirectory;
using Azure;
using System.Net.NetworkInformation;
using System.Security.Principal;
using System.Diagnostics;
using System;
using AccelCrypt;
using Microsoft.EntityFrameworkCore.Migrations.Operations;
using Microsoft.SqlServer.Management.XEvent;
using System.Diagnostics.Eventing.Reader;
using EFCore.BulkExtensions;
using Microsoft.IdentityModel.Tokens;
using System.Linq;
using Microsoft.AspNetCore.Http;
using NetTopologySuite.Geometries;
using System.Reflection.Metadata;
using System.Security.Cryptography.X509Certificates;
using Microsoft.EntityFrameworkCore.Metadata;
using Newtonsoft.Json.Linq;
using Microsoft.Extensions.Primitives;
using System.Security.Permissions;
using System.Security;
using System.Drawing;
using Microsoft.AspNetCore.Mvc.ViewFeatures;
using System.Collections.Generic;
using globalClass;
using System.Configuration;
using System.Reflection.PortableExecutable;








namespace DeploymentSystemRest.Controllers
{


    [Route("deployment")]
    public class DeployController : Controller
    {


        private static Dictionary<string, string> keyDict = new Dictionary<string, string>();
        private static Dictionary<string, userInfo> userDict = new Dictionary<string, userInfo>();
        private static string sKeyBase = "@99$00!aBc#%%^AQ?>|k99C&";
        private static string deploySecret = "80490C7E-43DE-4F14-B0E0-9D9DC5F647E6"; // used for engine to engine communication
        private static string frontSecret = "906BAA36-9374-44FD-A9D0-42282B44BA47";
        private static string AccelKey = "1e02b967-589a-4d31-bbe8-739e4f74c36d";
        //private string urlString = "./Content/";
        private char[] delim = new char[] { ',' };
        //private string thePreviousEndpoint = "https://accel.accelcon.com/AccelQuery/api/bill/RunQuery";
        private string theEndpoint = "https://accel.accelcon.com/AccelQueryDeploy/api/bill/RunQuery";


        private static Dictionary<string, UploadData> asyncDict = new Dictionary<string, UploadData>();
        private static Dictionary<string, filePackageData> packageDict = new Dictionary<string, filePackageData>();












        public sendInfoBill? send { get; set; }






        [Route("testConnect")]
        [HttpGet]
        public RetInfo[] testConnect()
        {


            RetInfo ret = new RetInfo()
            {
                result = "success",
                error = null,
                otherData = "testConnect",
                extraData = "Stormed at with shot and shell",
                data = new Dictionary<string, string>()
                {
                    {"timeofDay", DateTime.Now.ToString() },
                    {"application", "AccelDeployRest" }
                }
            };
            RetInfo[] retArr = { ret };
            return retArr;
        }






        [Route("testIIS")]
        [HttpPost]
        public async Task<RetInfo[]> testIIS([FromBody] TokSendInfo info)
        {
            //var val2 = DateTime.Now;
            //System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" {val2}.  I am in TestIIS. \r\n");


            try
            {


               UploadFourth fourSooth = JsonConvert.DeserializeObject<UploadFourth>(info.data["UploadOptions"].ToString());


               List<KeyValueTemp> GridData = JsonConvert.DeserializeObject<List<KeyValueTemp>>(fourSooth.GridData.ToString());


                //  UploadFourth fourSooth = info.data["UploadOptions"].ToString();




                //     Dictionary<PackageContent, Dictionary<string, string>?> diction = JsonConvert.DeserializeObject<Dictionary<PackageContent, Dictionary<string, string>?>>(info.data["UploadOptions"].ToString());


                //  //use this to deserialize a second time.








                RetInfo ret = new();
                ret.result = "success";
                ret.data = fourSooth;
                RetInfo[] retArr = { ret };
                return retArr;


            }
            catch (Exception ex)
            {
                RetInfo err = new RetInfo();
                err.result = "error";
                err.extraData = ex.StackTrace;
                err.error = ex.Message;
                err.otherData = "testIIS";
                RetInfo[] retArr = { err };
                return retArr;
            }
        }






        IConfigurationRoot configuration = new ConfigurationBuilder()
                  .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
                  .AddJsonFile("appsettings.json")
                   .Build();




        [Route("login")]
        [HttpPost]
        public RetInfo[] login([FromBody] clientUserInfo cred)
        {
            try
            {
                //string sAdd = HttpContext.Current.Request.UserHostAddress;
                //string addr = sAdd;
                RetInfo ret = new RetInfo();
                RetInfo stateRet = new RetInfo();
                if (cred.password == string.Empty || cred.password == null || cred.userName == string.Empty || cred.userName == null)
                {
                    ret.result = null;
                    ret.otherData = null;
                    ret.error = "missing data";
                    ret.data = null;
                    List<RetInfo> retList = new List<RetInfo>() { ret };
                    return retList.ToArray();
                }
                if (userDict.ContainsKey(cred.userName))
                {
                    userDict.Remove(cred.userName);
                }






                IConfigurationRoot configuration = new ConfigurationBuilder()
                    .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
                    .AddJsonFile("appsettings.json")
                     .Build();


                var prefix = configuration.GetSection("ConnectionString").GetSection("Prefix").Value;




                string user = cred.userName;
                string fullUser = prefix + "\\" + user; // ConfigurationManager.AppSettings["domain"] + "\\" + user;
#pragma warning disable CA1416 // Validate platform compatibility
                PrincipalContext pc = new(ContextType.Domain, prefix); //ConfigurationManager.AppSettings["domain"]);
#pragma warning restore CA1416 // Validate platform compatibility
                var userD = System.Convert.FromBase64String(cred.userName);
                string userN = System.Text.Encoding.UTF8.GetString(userD);
                var passD = System.Convert.FromBase64String(cred.password);
                string pass = System.Text.Encoding.UTF8.GetString(passD);
                //addr = addr.Replace("_", "").Replace(".", "");
                //int l = addr.Length;
                //addr += sKeyBase.Substring(0, 12 + 12 - l);
                byte[] sVal = Encrypt(cred.password, sKeyBase);
                //string pass = Decrypt(sVal, addr);
#pragma warning disable CA1416 // Validate platform compatibility
                bool bValid = pc.ValidateCredentials(userN, pass);
#pragma warning restore CA1416 // Validate platform compatibility
                if (bValid == false)
                {
                    ret.result = null;
                    ret.otherData = "login";
                    ret.data = null;
                    ret.error = "user / pass not valid";
                    List<RetInfo> retList = new List<RetInfo>() { ret };
                    return retList.ToArray();
                }
                if (userDict.ContainsKey(user))
                    userDict.Remove(user);
                Guid? sessionId = Guid.NewGuid();
                userInfo ui = new userInfo()
                {
                    //Request.HttpContext.Connection.RemoteIpAddress //Get the IP address from the user to verify that they are using the same device in future
                    sessionId = sessionId,
                    user = user,
                    _timeStamp = DateTime.Now.AddMinutes(60.0),
                    access = null,
                    token = new Guid(frontSecret),
                    sec_pass = sVal,
                    address = Request.HttpContext.Connection.RemoteIpAddress.ToString()
                };


                userDict.Add(user, ui);
                if (keyDict.ContainsKey(UTF8Encoding.UTF8.GetString(sVal)))
                    keyDict.Remove(UTF8Encoding.UTF8.GetString(sVal));
                keyDict.Add(UTF8Encoding.UTF8.GetString(sVal), sKeyBase);
                string sSec = Guid.NewGuid().ToString();
                cred.sessionId = sessionId.ToString();
                cred.password = null;
                //string[] uGroup = GetGroups(cred.userName);
                //string groupList = "";
                //foreach (var s in uGroup)
                //{
                //    if (groupList == "")
                //        groupList = s.ToString();
                //    else
                //        groupList += "," + s.ToString();
                //}
                //cred.groups = groupList;
                ret.data = cred;
                ret.result = "success";
                ret.otherData = "login";
                ret.error = null;


                List<RetInfo> retListOk = new List<RetInfo>() { ret };
                return retListOk.ToArray();
            }
            catch (Exception ex)
            {
                RetInfo erRet = new RetInfo();
                erRet.data = null;
                erRet.result = "error";
                erRet.otherData = "login";
                erRet.error = ex.Message;
                List<RetInfo> retListOk = new List<RetInfo>() { erRet };


                return retListOk.ToArray();
            }
        }


        [Route("checkCred")]
        [HttpPost]
        public bool checkCred(clientUserInfo cred)
        {
            //&& entry.token == new Guid(cred.password)
            try
            {
                if (userDict.ContainsKey(cred.userName))
                {
                    var entry = userDict[cred.userName];
                    if (entry._timeStamp > DateTime.Now && entry.sessionId == new Guid(cred.sessionId) && entry.address == cred.groups)
                    {
                        userDict[cred.userName]._timeStamp = DateTime.Now.AddMinutes(60.0);
                        return true;
                    }
                    else
                    {
                        userDict.Remove(cred.userName);
                        return false;
                    }
                }


            }
            catch (Exception ex)
            {
                return false;
            }


            return false;
        }




        [Route("verify")]
        [HttpPost]
        public bool verify(clientUserInfo cred)
        {
            try
            {


                if (userDict.ContainsKey(cred.userName))
                {
                    var entry = userDict[cred.userName];
                    if (entry._timeStamp > DateTime.Now && entry.sessionId == new Guid(cred.sessionId))
                    {
                        userDict[cred.userName]._timeStamp = DateTime.Now.AddMinutes(60.0);
                        return true;
                    }
                    else
                    {
                        userDict.Remove(cred.userName);
                        return false;
                    }
                }
            }
            catch (Exception ex)
            {
                return false;
            }
            return false;


        }




        [Route("CheckConnection")]
        [HttpPost]
        public async Task<RetInfo[]> CheckConnection([FromBody] GBSendInfo info)
        {
            try
            {
                BillTestDBContext ct = new BillTestDBContext();
                BillTestDBContextProcedures ptc = new BillTestDBContextProcedures(ct);
                string clientD = info.data["clientID"].ToString();
                Guid clientID = Guid.Empty;
                if (Guid.TryParse(clientD, out clientID) == false)
                {
                    RetInfo err = new RetInfo();
                    err.result = "error";
                    err.otherData = "packageSave";
                    err.error = $"no no clientID found";
                    RetInfo[] retArr = { err };
                    return retArr;
                }
                List<GetSpecificClientResult> locations = await ptc.GetSpecificClientAsync(clientID);


                string location = locations[0].APILocation;


                HttpClient client = new();
                var response = await client.GetAsync(location + "testConnect");
                System.IO.File.AppendAllText(@"c:\accel\richard.txt", $"response: {response}\r\n");
                dynamic resp = await response.Content.ReadAsStringAsync();
                System.IO.File.AppendAllText(@"c:\accel\richard.txt", $"Resp: {resp}\r\n");
                try
                {
                    RetInfo[] ret = JsonConvert.DeserializeObject<RetInfo[]>(resp);
                    //System.IO.File.AppendAllText(@"c:\accel\richard.txt", $"Resp: {resp}\r\n");
                    return ret;


                }
                catch( Exception ex)
                {
                    System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" {ex.Message}.  I errored in ActionReceive. \r\n");
                    System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" {ex.StackTrace}.  I errored here. \r\n");
                    RetInfo err = new RetInfo();
                    err.result = "error";
                    err.error = ex.Message;
                    err.data = resp;
                    err.otherData = "CheckConnetion";
                    RetInfo[] retArr = { err };
                    return retArr;
                }


            }
            catch (Exception ex)
            {
                RetInfo err = new RetInfo();
                err.result = "error";
                err.error = ex.Message;
                err.data = info.data;
                err.otherData = "CheckConnetion";
                RetInfo[] retArr = { err };
                return retArr;
            }
        }






        //Administrative Commands
        //-------------------------------------\\
        [Route("getPrograms")]
        [HttpPost]
        public async Task<RetInfo[]> getPrograms([FromBody] GBSendInfo info)
        {
            BillTestDBContext ct = new BillTestDBContext();
            BillTestDBContextProcedures ptc = new BillTestDBContextProcedures(ct);
            try
            {
                clientUserInfo cred = new clientUserInfo();
                cred.sessionId = info.sessionId;
                cred.userName = info.user;


                if (!verify(cred))
                {
                    RetInfo err = new RetInfo();
                    err.result = "error";
                    err.error = "Validation Failed";
                    err.otherData = "getPrograms";
                    RetInfo[] retErr = { err };
                    return retErr;
                }


                dynamic d;
                bool bOk = info.data.TryGetValue("clientID", out d);
                if (bOk != true)
                {
                    RetInfo err = new RetInfo();
                    err.result = "error";
                    err.error = "could not get clientID";
                    err.otherData = "getPrograms";
                    RetInfo[] retArr2 = { err };
                    return retArr2;
                }
                List<string> clientID = JsonConvert.DeserializeObject<List<string>>(d.ToString() ?? "");


                List<crudParam> clientParams = new List<crudParam>();


                RetInfo ret = new();
                if (clientID.Count > 0)
                {
                    Guid batch_id = Guid.NewGuid();
                    foreach (string id in clientID)
                    {
                        crudParam temp = new crudParam() { batch_id = batch_id, run_id = Guid.NewGuid(), fieldName = "id", fieldValue = id, tableName = "" };
                        clientParams.Add(temp);
                    }
                    await ct.BulkInsertAsync<crudParam>(clientParams);
                    List<DeployProgramsSelectByClientsResult> dict = await ptc.DeployProgramsSelectByClientsAsync(batch_id);
                    ret.data = dict;
                    ret.result = "success";
                }
                else
                {
                    ret.result = "error";
                    ret.data = "no clientIDs found";
                }
               // List<getProgramsByClientResult> dict = await ptc.getProgramsByClientAsync(clientGuid);


                RetInfo[] retArr = { ret };
                return retArr;


            }
            catch (Exception ex)
            {
                RetInfo err = new RetInfo();
                err.result = "error";
                err.error = ex.Message;
                err.data = info.data;
                err.otherData = "getPrograms";
                RetInfo[] retArr = { err };
                return retArr;
            }
        }


        [Route("GetAllClientPrograms")]
        [HttpPost]
        public async Task<RetInfo[]> GetAllClientPrograms()
        {


            BillTestDBContext ct = new BillTestDBContext();
            BillTestDBContextProcedures ptc = new BillTestDBContextProcedures(ct);
            try
            {
                List<deployClients> clients = await ptc.GetDeployClientsAsync();
                List<ClientProgram> dict = new List<ClientProgram>();
                //  (await ptc.GetDeployClientsAsync()).ForEach((item) => { dict.Add(new ClientProgram(item)); });


                foreach (deployClients client in clients)
                {
                    List<getProgramsByClientResult> programs = await ptc.getProgramsByClientAsync(client.clientID);
                    ClientProgram con = new()
                    {
                        clientID = client.clientID,
                        clientName = client.clientName,
                        clientTimeZone = client.clientTimeZone,
                        APILocation = client.APILocation,
                        clientState = client.clientState,
                        cuser = client.cuser,
                        cdate = client.cdate,
                        mdate = client.mdate,
                        muser = client.muser,
                        status = client.status,
                        programList = programs


                };


                    dict.Add(con);


                }


                RetInfo ret = new RetInfo();
                ret.result = "success";
                ret.data = dict;
                ret.otherData = "GetAllClientPrograms";
                RetInfo[] retArr = { ret };
                return retArr;


            }
            catch (Exception ex)
            {
                RetInfo err = new RetInfo();
                err.result = "error";
                err.error = ex.Message;
               // err.data = info.data;
                err.otherData = "getAllClientPrograms";
                RetInfo[] retArr = { err };
                return retArr;
            }
        }


        [Route("States")]
        [HttpPost]
        public async Task<RetInfo[]> States()
        {
            try
            {
                BillTestDBContext ct = new BillTestDBContext();
                BillTestDBContextProcedures pct = new BillTestDBContextProcedures(ct);
                List<GetStatesResult> myList = (await pct.GetStatesAsync()).ToList();


                if (myList.Count < 1)
                {
                    RetInfo retNo = new RetInfo();
                    retNo.result = "No Data";
                    retNo.error = "No Data";
                    retNo.data = null;
                    retNo.otherData = "StateList";
                    RetInfo[] retArr2 = { retNo };
                    return retArr2;
                }
                RetInfo ret = new RetInfo();
                ret.result = "success";
                ret.data = myList;
                ret.otherData = "StateList";
                RetInfo[] retArr = { ret };
                return retArr;
            }
            catch (Exception ex)
            {
                RetInfo err = new RetInfo();
                err.result = "error";
                err.error = ex.Message;
                err.otherData = "StateList";
                RetInfo[] retArr = { err };
                return retArr;
            }
        }


        [Route("getTimezonesByStates")]
        [HttpPost]
        public async Task<RetInfo[]> getTimezonesByStates([FromBody] GBSendInfo info)
        {
            BillTestDBContext ct = new BillTestDBContext();
            BillTestDBContextProcedures ptc = new BillTestDBContextProcedures(ct);
            try
            {
                dynamic date = DateTime.Now;
                // System.IO.File.AppendAllText(@"c:\accel\richard.txt", $"\r\n {date}  I am in getPrograms. \r\n");
                dynamic d;
                bool bOk = info.data.TryGetValue("stateID", out d);
                if (bOk != true)
                {
                    RetInfo err = new RetInfo();
                    err.result = "error";
                    err.error = "could not get stateID";
                    err.otherData = "getPrograms";
                    RetInfo[] retArr2 = { err };
                    return retArr2;
                }
                string stateD = d.GetString();
                // System.IO.File.AppendAllText(@"c:\accel\richard.txt", $"{stateID}");


                Guid stateGUID = new Guid(stateD);


                List<getTimezonesByStatesResult> dict = await ptc.getTimezonesByStatesAsync(stateGUID);
                RetInfo ret = new();
                ret.data = dict;
                ret.result = "success";
                RetInfo[] retArr = { ret };
                return retArr;


            }
            catch (Exception ex)
            {
                RetInfo err = new RetInfo();
                err.result = "error";
                err.error = ex.Message;
                err.data = info.data;
                err.otherData = "getTimezones";
                RetInfo[] retArr = { err };
                return retArr;
            }
        }


        [Route("GetClients")] 
        [HttpPost]
        public async Task<RetInfo[]> GetClients(string programID)
        {
            BillTestDBContext ct = new BillTestDBContext();
            BillTestDBContextProcedures ptc = new BillTestDBContextProcedures(ct);
            try
            {
                if (string.IsNullOrEmpty(programID))
                {
                    List<deployClients> dict = await ptc.GetDeployClientsAsync();
                    RetInfo ret = new();
                    ret.result = "success";
                    ret.otherData = "GetClients";
                    ret.data = dict;
                    RetInfo[] retArr = { ret };
                    return retArr;
                }
                else
                {
                    //list of clients with the program Id associated


                    send = new sendInfoBill();
                    send.parameters = new Dictionary<string, dynamic> { { "cmd", "" } };
                    send.u = System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes("richard.shirley"));
                    send.p = System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes("T0day92821!"));


                    send.parameters["cmd"] =
                        $"select dc.clientName, dcp.clientID, dcp.endpoint,dcp.server,dcp.databaseName, dc.APILocation from deployClientPrograms dcp join deployClients dc on dcp.clientID = dc.clientID where programID = '{programID}'";


                    List<ProgramClientsData> dict = await GetDataAsync<ProgramClientsData>(theEndpoint, send);


                    RetInfo ret = new();
                    ret.result = "success";
                    ret.otherData = "GetClients";
                    ret.data = dict;
                    RetInfo[] retArr = { ret };
                    return retArr;
                }


              


            }
            catch (Exception ex)
            {
                RetInfo err = new RetInfo();
                err.result = "error";
                err.error = ex.Message;
                err.otherData = "getClients";
                RetInfo[] retArr = { err };
                return retArr;
            }
        }






        [Route("getPackages")]
        [HttpPost]
        public async Task<RetInfo[]> getPackages()
        {
            try
            {
                BillTestDBContext ct = new BillTestDBContext();
                BillTestDBContextProcedures ptc = new BillTestDBContextProcedures(ct);
                List<getAllPackagesResult> dict = await ptc.getAllPackagesAsync();




                RetInfo ret = new();
                ret.result = "success";
                ret.data = dict;
                RetInfo[] retArr = { ret };
                return retArr;
            }
            catch (Exception ex)
            {
                RetInfo err = new RetInfo();
                err.result = "error";
                err.error = ex.Message;
                err.otherData = "getPackages";
                RetInfo[] retArr = { err };
                return retArr;
            }
        }


        [Route("getFilesByPackage")]
        [HttpPost]
        public async Task<RetInfo[]> getFilesByPackage([FromBody] GBSendInfo info)
        {
            try
            {
                clientUserInfo cred = new clientUserInfo();
                cred.sessionId = info.sessionId;
                cred.userName = info.user;


                if (!verify(cred))
                {
                    RetInfo err = new RetInfo();
                    err.result = "error";
                    err.error = "Validation Failed";
                    err.otherData = "getFilesByPackage";
                    RetInfo[] retErr = { err };
                    return retErr;
                }


                BillTestDBContext ct = new BillTestDBContext();
                BillTestDBContextProcedures ptc = new BillTestDBContextProcedures(ct);
                String package = info.data["package"].ToString();


                Guid packageID = Guid.Empty;
                if (Guid.TryParse(package, out packageID) == false)
                {
                    RetInfo err = new RetInfo();
                    err.result = "error";
                    err.otherData = "getFilesByPackage";
                    err.error = $"now packageID found";
                    RetInfo[] retArrr = { err };
                    return retArrr;
                }


                List<getFilesByPackageResult> dict = await ptc.getFilesByPackageAsync(packageID);
                RetInfo ret = new();
                ret.result = "success";
                ret.data = dict;
                RetInfo[] retArr = { ret };
                return retArr;


            }
            catch (Exception ex)
            {
                RetInfo err = new RetInfo();
                err.result = "error";
                err.error = ex.Message;
                err.otherData = "getFilesByPackage";
                RetInfo[] retArr = { err };
                return retArr;
            }
        }


        //Need to Test
        [Route("DeletePackage")]
        [HttpPost]
        public async Task<RetInfo[]> DeletePackage([FromBody] GBSendInfo info)
        {
            BillTestDBContext ct = new BillTestDBContext();
            BillTestDBContextProcedures ptc = new BillTestDBContextProcedures(ct);
            try
            {
                Guid packageID = Guid.Empty;
                if (Guid.TryParse(info.data["packageID"], out packageID) == false)
                {
                    RetInfo err = new RetInfo();
                    err.result = "error";
                    err.otherData = "DeletePackage";
                    err.error = $"no packageID found";
                    RetInfo[] retArrr = { err };
                    return retArrr;
                }
                //Get File Information
                List<getFilesByPackageResult> dict = await ptc.getFilesByPackageAsync(packageID);


                //Delete all files, pacakgeContents, and the Package record sql tables
                int sqlDelete = await ptc.DeployDeletePackageAsync(packageID);


                //delete all files and directories from webman


                string packageLocation = Path.GetDirectoryName(dict[0].path);
                DirectoryInfo di = new DirectoryInfo(packageLocation);


                foreach (FileInfo file in di.GetFiles())
                {
                    file.Delete();
                }
                di.Delete();


                RetInfo ret = new();
                ret.result = "success";
                ret.otherData = 
                ret.data = packageLocation + " was deleted";
                RetInfo[] retArr = { ret };
                return retArr;


            }
            catch (Exception ex)
            {
                RetInfo err = new RetInfo();
                err.result = "error";
                err.error = ex.Message;
                err.otherData = "deletePackage";
                RetInfo[] retArr = { err };
                return retArr;
            }
        }


        //[Route("deleteFilesFromPackage")]
        //[HttpPost]
        //public async Task<RetInfo[]> deleteFilesFromPackage([FromBody] GBSendInfo info)
        //{
        //    try
        //    {


        //        BillTestDBContext ct = new BillTestDBContext();
        //        BillTestDBContextProcedures ptc = new BillTestDBContextProcedures(ct);
        //        String packageName = info.data["package"].ToString();
        //        String fileName = info.data["fileName"].ToString();
        //        string Dir = Directory.GetCurrentDirectory();
        //        string mainFolder = Dir + "\\UploadedPackages\\" + packageName;


        //        //delete the physical file
        //        FileInfo file = new FileInfo(mainFolder + packageName);
        //        file.Delete();


        //        //mark the SQL row as deleted
        //        int dict = await ptc.UpdatePackageFilesAsync(fileName, packageName, null, "deleted");


        //        //Return success
        //        RetInfo ret = new();
        //        ret.result = "success";
        //        ret.data = dict;
        //        RetInfo[] retArr = { ret };
        //        return retArr;


        //    }
        //    catch (Exception ex)
        //    {
        //        RetInfo err = new RetInfo();
        //        err.result = "error";
        //        err.error = ex.Message;
        //        err.otherData = "deleteFile";
        //        RetInfo[] retArr = { err };
        //        return retArr;
        //    }
        //}






        [Route("GetAllScripts")]
        [HttpPost]
        public async Task<RetInfo[]> GetAllScripts()
        {
            BillTestDBContext ct = new BillTestDBContext();
            BillTestDBContextProcedures ptc = new BillTestDBContextProcedures(ct);
            try
            {


                List<getDeployScriptsResult> dict = await ptc.getDeployScriptsAsync();
                RetInfo ret = new();
                ret.result = "success";
                ret.data = dict;
                RetInfo[] retArr = { ret };
                return retArr;


            }
            catch (Exception ex)
            {
                RetInfo err = new RetInfo();
                err.result = "error";
                err.error = ex.Message;
                err.otherData = "getClients";
                RetInfo[] retArr = { err };
                return retArr;
            }
        }


        [Route("GetClientScripts")]
        [HttpPost]
        public async Task<RetInfo[]> GetClientScripts([FromBody] GBSendInfo info)
        {
            BillTestDBContext ct = new BillTestDBContext();
            BillTestDBContextProcedures ptc = new BillTestDBContextProcedures(ct);
            try
            {
                Guid clID = new Guid(info.data["clientID"].ToString());


                List<getClientScriptsResult> dict = await ptc.getClientScriptsAsync(clID);
                RetInfo ret = new();
                ret.result = "success";
                ret.data = dict;
                RetInfo[] retArr = { ret };
                return retArr;
            }
            catch (Exception ex)
            {
                RetInfo err = new RetInfo();
                err.result = "error";
                err.error = ex.Message;
                err.otherData = "getClientScripts";
                RetInfo[] retArr = { err };
                return retArr;
            }
        }


        [Route("GetDeployHistory")]
        [HttpPost]
        public async Task<RetInfo[]> GetDeployHistory()
        {
            try
            {
                send = new sendInfoBill();
                send.parameters = new Dictionary<string, dynamic> { { "cmd", "" } };
                send.u = System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes("richard.shirley"));
                send.p = System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes("T0day92821!"));


                send.parameters["cmd"] = $"select dc.clientName, dp.programName, case when packageID != (select cast(cast(0 as binary) as uniqueidentifier)) then (select packageName from DeployPackages where packageID = packageID)\r\n\telse cast(packageID as nvarchar) end package,\r\n    dh.cdate,\r\n\tdh.cuser,\r\n\tdh.status " +
                    $"from deployHistory dh join deployClients dc on dh.clientid = dc.clientID " +
                    $"join deployPrograms dp on dh.programID = dp.programID " +
                    $"order by dh.cdate desc";


                List<deployHistory> dict = await GetDataAsync<deployHistory>(theEndpoint, send);


                RetInfo ret = new();
                ret.result = "success";
                if (dict.Count == 0)
                {
                    ret.data = "No data found";
                }
                else
                {
                    ret.data = dict;


                }
                RetInfo[] retArr = { ret };
                return retArr;
            }
            catch (Exception ex)
            {
                RetInfo err = new RetInfo();
                err.result = "error";
                err.error = ex.Message;
                err.otherData = "GetDeployActions";
                RetInfo[] retArr = { err };
                return retArr;
            }
        }


        [Route("GetDeployActions")]
        [HttpPost]
        public async Task<RetInfo[]> GetDeployActions()
        {
            try
            {
                send = new sendInfoBill();
                send.parameters = new Dictionary<string, dynamic> { { "cmd", "" } };
                send.u = System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes("richard.shirley"));
                send.p = System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes("T0day92821!"));


                send.parameters["cmd"] =
                    $"select da.action,dt.type,dat.id from DeployPackageActionType dat join deployAction da on dat.actionID = da.id join deployType dt on dat.typeID = dt.id";


                List<ActionTypeData> dict = await GetDataAsync<ActionTypeData>(theEndpoint, send);


                RetInfo ret = new();


                if (dict == null)
                {
                    ret.result = "error";
                    ret.data = "Something went wrong";
                }
                else
                {
                    ret.result = "success";
                    ret.data = dict;
                }
                RetInfo[] retArr = { ret };
                return retArr;
            }
            catch (Exception ex)
            {
                RetInfo err = new RetInfo();
                err.result = "error";
                err.error = ex.Message;
                err.otherData = "GetDeployActions";
                RetInfo[] retArr = { err };
                return retArr;
            }
        }






        [Route("InsertDeployHistory")]
        [HttpPost]
        public async Task<RetInfo[]> InsertDeployHistory()
        {
            try
            {
                //IFormFileCollection files = Request.Form.Files;
                var header = Request.Headers;
                //var urls = header.OfType<string>().ToList();


                string clientD = header["clientID"].ToString();
                string packageD = header["packageID"].ToString();
                string programD = header["programID"].ToString();
                //string endpoint = header["endpoint"].ToString();
                string userName = header["userName"].ToString();


                //convert all to GUID
                Guid cID = Guid.Empty;
                if (Guid.TryParse(clientD, out cID) == false)
                {
                    RetInfo err = new RetInfo();
                    err.result = "error";
                    err.otherData = "InsertDeployHistory";
                    err.error = $"no no clientID found";
                    RetInfo[] retArrr = { err };
                    return retArrr;
                }
                Guid packageID = Guid.Empty;
                if (Guid.TryParse(packageD, out packageID) == false)
                {
                    //RetInfo err = new RetInfo();
                    //err.result = "error";
                    //err.otherData = "InsertDeployHistory";
                    //err.error = $"no no clientID found";
                    //RetInfo[] retArrr = { err };
                    //return retArrr;
                }
                Guid programID = Guid.Empty;
                if (Guid.TryParse(programD, out programID) == false)
                {
                    RetInfo err = new RetInfo();
                    err.result = "error";
                    err.otherData = "InsertDeployHistory";
                    err.error = $"no no clientID found";
                    RetInfo[] retArrr = { err };
                    return retArrr;
                }


                send = new sendInfoBill();
                send.parameters = new Dictionary<string, dynamic> { { "cmd", "" } };
                send.u = System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes("richard.shirley"));
                send.p = System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes("T0day92821!"));


                send.parameters["cmd"] =
                    $"insert deployHistory values (NEWID(), '{cID}', '{packageID}','{programID}', GetDate(), '{userName}', 'completed')";


                List<string> dict = await GetDataAsync<string>(theEndpoint, send);


                RetInfo ret = new();
                ret.result = "success";
                if (dict.Count == 0)
                {
                    ret.data = "Something went wrong";
                }
                else
                {
                    ret.data = dict;
                }
                RetInfo[] retArr = { ret };
                return retArr;


            }
            catch (Exception ex)
            {
                RetInfo err = new RetInfo();
                err.result = "error";
                err.error = ex.Message;
                err.otherData = "AddDeployHistory";
                RetInfo[] retArr = { err };
                return retArr;
            }
        }




        //[Route("deletePackage")]
        //[HttpPost]
        //public async Task<RetInfo[]> deletePackage([FromBody] GBSendInfo info)
        //{
        //    try
        //    {
        //        BillTestDBContext ct = new BillTestDBContext();
        //        BillTestDBContextProcedures ptc = new BillTestDBContextProcedures(ct);
        //        String packageName = info.data["package"].ToString();
        //        //String decision = info.data["decision"].ToString(); //could be archive or delete
        //        String decision = "delete";


        //        string Dir = Directory.GetCurrentDirectory();
        //        string mainFolder = Dir + "\\UploadedPackages\\";
        //        string archiveFolder = Dir + "\\ArchivedPackages\\";
        //        String packageFolder = mainFolder + packageName;




        //       // if (decision.ToLower() == "archive")
        //       // {


        //        Directory.CreateDirectory(archiveFolder);
        //        ZipFile.CreateFromDirectory(packageFolder, (archiveFolder + packageName));


        //        //}
        //        //The following fully deletes the package
        //        //System.IO.DirectoryInfo di = new DirectoryInfo(packageFolder);
        //        //foreach (FileInfo file in di.GetFiles())
        //        //{
        //        //    int dict2 = await ptc.UpdatePackageFilesAsync(file.Name, packageName, null, decision);
        //        //    file.Delete();
        //        //}
        //        //di.Delete();
        //        List<updateDeployPackagesResult> dict = await ptc.updateDeployPackagesAsync(packageName, null, decision.ToLower(), null, null);




        //        RetInfo ret = new();
        //        ret.result = "success";
        //        ret.data = dict;
        //        RetInfo[] retArr = { ret };
        //        return retArr;
        //    }
        //    catch (Exception ex)
        //    {
        //        RetInfo err = new RetInfo();
        //        err.result = "error";
        //        err.error = ex.Message;
        //        err.otherData = "deletePackage";
        //        RetInfo[] retArr = { err };
        //        return retArr;
        //    }
        //}


        [Route("deleteClient")]
        [HttpPost]
        public async Task<RetInfo[]> deleteClient([FromBody] GBSendInfo info)
        {
            var val2 = DateTime.Now;
            System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" {val2}.  I am in DeleteClient. \r\n");


            BillTestDBContext ct = new BillTestDBContext();
            BillTestDBContextProcedures ptc = new BillTestDBContextProcedures(ct);
            try
            {
                clientUserInfo cred = new clientUserInfo();
                cred.userName = info.user;
                cred.sessionId = info.sessionId;
                cred.groups = Request.HttpContext.Connection.RemoteIpAddress.ToString();


                if (!verify(cred))
                {
                    RetInfo err = new RetInfo();
                    err.result = "error";
                    err.error = "Validation Failed";
                    err.otherData = "createClient";
                    RetInfo[] retErr = { err };
                    return retErr;
                }


                string cName = info.data["clientName"].ToString();


                List<UpdateDepClientsResult> dict = await ptc.UpdateDepClientsAsync(cName, "state", "timezone", "apiFinal", "delete", info.user.ToString());


                RetInfo ret = new();
                ret.result = "success";
                ret.data = dict;
                RetInfo[] retArr = { ret };
                return retArr;


            }
            catch (Exception ex)
            {
                System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" {ex.Message} I Errored in DeleteClient. \r\n");
                RetInfo err = new RetInfo();
                err.result = "error";
                err.error = ex.Message;
                err.otherData = "deleteClient";
                RetInfo[] retArr = { err };
                return retArr;
            }
        }




        [Route("deleteProgram")]
        [HttpPost]
        public async Task<RetInfo[]> deleteProgram([FromBody] TokSendInfo info)
        {
            var val2 = DateTime.Now;
            System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" {val2}.  I am in DeleteProgram. \r\n");


            BillTestDBContext ct = new BillTestDBContext();
            BillTestDBContextProcedures ptc = new BillTestDBContextProcedures(ct);
            try
            {
                clientUserInfo cred = new clientUserInfo();
                cred.userName = info.user;
                cred.sessionId = info.sessionId;
                cred.password = info.token;
                cred.groups = Request.HttpContext.Connection.RemoteIpAddress.ToString();




                if (!checkCred(cred))
                {
                    RetInfo err = new RetInfo();
                    err.result = "error";
                    err.error = "Validation Failed";
                    err.otherData = "deleteProgram";
                    RetInfo[] retErr = { err };
                    return retErr;
                }


                dynamic prog;
                dynamic clientD;
                bool cOk = info.data.TryGetValue("clientID", out clientD);
                bool progOk = info.data.TryGetValue("program", out prog);


                if (cOk != true || progOk != true)
                {
                    RetInfo err = new RetInfo();
                    err.result = "error";
                    err.data = new String[] { cOk.ToString(), progOk.ToString() };
                    err.error = "Could not initalize a variable";
                    err.otherData = "deleteProgramPreCheck";
                    RetInfo[] retArr2 = { err };
                    return retArr2;
                }


                var userD = System.Convert.FromBase64String(cred.userName);
                string userN = System.Text.Encoding.UTF8.GetString(userD);


                // System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" Past Variables. \r\n");


                Guid guID = new Guid(clientD.ToString());
                Guid proID = new Guid(prog.ToString());


                //Get information about the client's programs
                List<getProgramsByClientResult> programs = await ptc.getProgramsByClientAsync(guID);


                foreach (getProgramsByClientResult program in programs)
                {
                    if (program.programID.ToString() == prog.ToString())
                    {
                        string progName = program.programName;
                        String location = program.APILocation;
                        String clientName = program.clientName;
                        //    String mainURL = program.mainUrl;
                        //    String backupURL = program.backupUrl;// + programName + ".zip";
                        //    String appPool = program.applicationPool;


                        // System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" Past Program Variables. \r\n");


                        MultipartFormDataContent content = new MultipartFormDataContent();
                        //   content.Add(new StringContent(mainURL), mainURL); //urls 0
                        //   content.Add(new StringContent(backupURL), backupURL); //urls 1
                        content.Add(new StringContent(deploySecret), deploySecret);//urls 2
                                                                                   //   content.Add(new StringContent(appPool), appPool); //urls 3
                        content.Add(new StringContent(clientName), clientName); // urls 4


                        //  System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" Past Content creation. \r\n");






                        //if(mainURL != "C:\\inetpub\\wwwroot")//Here because oops accidentally almost nuked webman.
                        //{
                        //    HttpClient client = new HttpClient();
                        //    var response = await client.PostAsync(location + "ClientDeleteProgram", content);


                        //    dynamic resp = await response.Content.ReadAsStringAsync();
                        //    RetInfo result = JsonConvert.DeserializeObject<RetInfo>(resp);
                        //}




                        //see above
                        //if( result.result.ToLower() == "success") 
                        //{
                        List<UpdateClientProgramsResult> dict = await ptc.UpdateClientProgramsAsync(proID, guID, "empty", "delete", userN.ToString());//add stored procedure to diagram


                        // }


                        RetInfo ret = new();
                        //ret.result = result.result.ToLower();
                        //ret.data = result.data;
                        ret.result = "success";
                        ret.data = dict;
                        RetInfo[] retArr = { ret };
                        return retArr;
                    }
                }
                RetInfo retER = new();
                retER.result = "error";
                retER.error = "No Matching Program Found";
                RetInfo[] retArrr = { retER };
                return retArrr;
            }
            catch (Exception ex)
            {
                System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" {ex.Message} I Errored in Delete Program. \r\n");
                RetInfo err = new RetInfo();
                err.result = "error";
                err.error = ex.Message;
                err.otherData = "deleteProgram";
                RetInfo[] retArr = { err };
                return retArr;


            }
        }


        [Route("ClientDeleteProgram")]
        [HttpPost]
        public async Task<RetInfo> ClientDeleteProgram()
        {
            var val2 = DateTime.Now;
            System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" {val2} I'm in ClientDeleteProgram. \r\n");


            IFormFileCollection files = Request.Form.Files;
            var header = Request.Form.Keys;
            var urls = header.OfType<string>().ToList();
            try
            {
                //check for verification
                if (urls[2] != deploySecret)
                {
                    RetInfo err = new RetInfo();
                    err.result = "error";
                    return err;
                }


                string mainFolder = urls[0].ToString();
                string backupFolder = urls[1].ToString();
                string appPool = urls[3].ToString();
                string applicationPath = "/" + Path.GetFileName(urls[0]);


                //Disconnect application from app pool
                using (ServerManager SM = new ServerManager())
                {
                    if (SM.Sites[urls[4].ToString()] != null) //This should hopefully proactively eliminate errors on AIO 
                    {
                        Site site = SM.Sites[urls[4].ToString()];
                        Application app = site.Applications[applicationPath];
                        if (app != null)
                        {
                            site.Applications.Remove(app);
                            SM.CommitChanges();


                        }
                    }
                    else
                    {
                        foreach (Site site in SM.Sites) //Otherwise this loop will remove all instances of the application from the IIS server
                        {
                            Application app = site.Applications[applicationPath];
                            if (app != null)
                            {
                                site.Applications.Remove(app);
                                SM.CommitChanges();
                                //  break;


                            }
                        }
                    }


                }
                //Delete all Files and Folders from MainFolder
                System.IO.DirectoryInfo di = new DirectoryInfo(mainFolder);






                foreach (FileInfo file in di.GetFiles())
                {
                    file.Delete();
                }
                foreach (DirectoryInfo dir in di.GetDirectories())
                {
                    dir.Delete(true);
                }


                //Delete all files and folders from BackupFolder
                System.IO.DirectoryInfo di2 = new DirectoryInfo(backupFolder);
                di.Delete();


                foreach (FileInfo file in di2.GetFiles())
                {
                    file.Delete();
                }
                foreach (DirectoryInfo dir in di2.GetDirectories())
                {
                    dir.Delete(true);
                }
                di2.Delete();


                RetInfo ret = new RetInfo();
                ret.result = "success";
                return ret;


            }
            catch (Exception ex)
            {
                System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" {ex.Message} I errored in Client Delete Program. \r\n");
                RetInfo err = new RetInfo();
                err.result = "error";
                err.error = ex.Message;
                err.data = ex.Message;
                err.otherData = "clientdeleteProgram";
                return err;
            }
        }


        //----------Upload Commands-----------\\
        //-------------------------------------\\




        //[Route("createPackage")]
        //[HttpPost]
        //public async Task<RetInfo[]> createPackage()
        //{
        //    try
        //    {
        //        BillTestDBContext ct = new BillTestDBContext();
        //        BillTestDBContextProcedures ptc = new BillTestDBContextProcedures(ct);


        //        string Dir = Directory.GetCurrentDirectory();
        //        string mainFolder = Dir + "\\UploadedPackages\\";
        //        Directory.CreateDirectory(mainFolder);




        //        IFormFileCollection files = Request.Form.Files; //Putting a bereakpoint on this line will always cause an error. Otherwise it is fine.
        //        string packageName = Request.Form["packageName"];
        //        string packageUser = Request.Form["userName"];
        //        dynamic safeFiles = Request.Form["safeFiles"];
        //        dynamic safeFolders = Request.Form["safeFolders"];
        //        string packageFolder = mainFolder + packageName + '\\';


        //        List<updateDeployPackagesResult> dict = await ptc.updateDeployPackagesAsync(packageName, packageUser, "active",safeFiles, safeFolders); //Add the package to SQL


        //        //if (dict[0].result == 9) //This needs to be done by the Front-End otherwise only one file will be uploaded into the package
        //        //{
        //        //    RetInfo err = new RetInfo();
        //        //    err.result = "error";
        //        //    err.error = "Package Name not Unique";
        //        //    err.otherData = "createPackage";
        //        //    RetInfo[] retErr = { err };
        //        //    return retErr;
        //        //}
        //        Directory.CreateDirectory(packageFolder);




        //        foreach (var file in files)
        //        {
        //            string fullName = ContentDispositionHeaderValue.Parse(file.ContentDisposition).FileName.Trim().ToString();
        //            FileInfo fi = new FileInfo(fullName);
        //            string pathToSave = (packageFolder + file.FileName.ToString() + ""); //generate the save location of the file
        //            long fileSize = file.Length;
        //            using (var stream = new FileStream(pathToSave, FileMode.Create))
        //            {
        //                file.CopyTo(stream);
        //            }
        //            dynamic dictTwo = await ptc.UpdatePackageFilesAsync(file.FileName, packageName, fileSize, "active");


        //        }


        //        RetInfo ret = new RetInfo();
        //        ret.result = "success";
        //        ret.data = dict;
        //        RetInfo[] retArr = { ret };
        //        return retArr;


        //    }
        //    catch (Exception ex)
        //    {
        //        RetInfo err = new RetInfo();
        //        err.result = "error";
        //        err.error = ex.Message;
        //        err.otherData = "createPackage";
        //        RetInfo[] retArr = { err };
        //        return retArr;
        //    }


        //}








        //[Route("uploadFile")]
        //[HttpPost]
        //public async Task<RetInfo[]> uploadFile()
        //{
        //    try
        //    {
        //        BillTestDBContext ct = new BillTestDBContext();
        //        BillTestDBContextProcedures ptc = new BillTestDBContextProcedures(ct);


        //        string Dir = Directory.GetCurrentDirectory();
        //        string mainFolder = Dir + "\\UploadedPackages\\";
        //        Directory.CreateDirectory(mainFolder);




        //        IFormFileCollection files = Request.Form.Files; //Putting a bereakpoint on this line will always cause an error. Otherwise it is fine.
        //        //string packageName = Request.Form["fileName"];
        //        IFormFile mainFile = files[0];
        //        string fileName = files[0].FileName;
        //        long fileSize = files[0].Length;


        //        Guid packageID;
        //        string? pID = Request.Form["packageID"].ToString();
        //        if (!pID.IsNullOrEmpty())
        //        {
        //            packageID = Guid.Empty;
        //        }
        //        else
        //        {
        //            packageID = new Guid(Request.Form["packageID"]);
        //        }


        //        //initalize variables
        //        string packageUser = Request.Form["userName"];
        //        string batchString = Request.Form["batchNumber"].ToString(); //guid
        //        string actionType = Request.Form["actionID"].ToString(); //guid
        //        string fileCount = Request.Form["fileCount"].ToString();
        //        string fileOrder = Request.Form["fileOrder"];
        //        Guid batchKey = new Guid(batchString);
        //        Guid actionKey = new Guid(actionType);
        //        Guid thisFileID = new Guid();


        //        List<DeployPackageSelectActionByIDResult> types = await ptc.DeployPackageSelectActionByIDAsync(actionKey);
        //        DeployPackageSelectActionByIDResult type = types[0];


        //        //generate unique path to save the batch of files
        //        string pathToSave = mainFolder + batchString + "\\";








        //        if ( (packageDict.ContainsKey(batchString)) != true)
        //        {//If the package does not exist then...
        //            DeployFilesBatch upFile = new DeployFilesBatch(); //create a record of the file
        //            upFile.FileName = fileName;
        //            upFile.FileSize = fileSize;
        //            upFile.BatchId = batchKey;
        //            upFile.FileId = thisFileID;
        //            upFile.Status = "active"; 


        //            DeployPackageContentBatch packFile = new(); //create a package-content record of the file
        //            packFile.Id = new Guid();
        //            packFile.BatchId = batchKey;
        //            packFile.ContentId = new Guid();
        //            packFile.PackageId = packageID;
        //            packFile.ActionTypeId = actionKey;
        //            packFile.ItemId = thisFileID;
        //            packFile.OrderSequence = fileOrder;


        //            filePackageData preppedFile = new filePackageData(); //combine them into a memory-record
        //            preppedFile.fileCount = int.Parse(fileCount);
        //            preppedFile.batchPath = pathToSave;
        //            preppedFile.files.Add(upFile);
        //            preppedFile.packages.Add(packFile); 




        //            packageDict.Add(batchString, preppedFile); //save the memory record




        //        }
        //        else
        //        {// If the package does exist...
        //            if(packageDict[batchString].countReceived == packageDict[batchString].fileCount)
        //            {//If the number of files expected to be uploaded has already been met before the current file was uploaded...


        //                packageDict.Remove(batchString);


        //                RetInfo err = new RetInfo();
        //                err.result = "error";
        //                err.error = "FileCount Error";
        //                err.otherData = "uploadFile";
        //                RetInfo[] retErr = { err };
        //                return retErr;
        //            }
        //            else
        //            {
        //                DeployFilesBatch upFile = new DeployFilesBatch(); //create a record of the file
        //                upFile.FileName = fileName;
        //                upFile.FileSize = fileSize;
        //                upFile.BatchId = batchKey;
        //                upFile.FileId = thisFileID;
        //                upFile.Status = "active";


        //                DeployPackageContentBatch packFile = new(); //create a package-content record of the file
        //                packFile.Id = new Guid();
        //                packFile.BatchId = batchKey;
        //                packFile.ContentId = new Guid();
        //                packFile.PackageId = packageID;
        //                packFile.ActionTypeId = actionKey;
        //                packFile.ItemId = thisFileID;
        //                packFile.OrderSequence = fileOrder;


        //                packageDict[batchString].files.Add(upFile);
        //                packageDict[batchString].packages.Add(packFile);


        //                packageDict[batchString].countReceived = packageDict[batchString].countReceived + 1;




        //            }


        //            Directory.CreateDirectory(pathToSave);


        //            foreach (var file in files)
        //            {
        //                string fullName = ContentDispositionHeaderValue.Parse(file.ContentDisposition).FileName.Trim().ToString();
        //                FileInfo fi = new FileInfo(fullName);
        //                string pathToSaveFile = (pathToSave + file.FileName.ToString() + ""); //generate the save location of the file
        //                using (var stream = new FileStream(pathToSaveFile, FileMode.Create))
        //                {//save the file
        //                    file.CopyTo(stream);
        //                }


        //            }




        //        }


        //        Dictionary<string, string> dict = new Dictionary<string, string>();
        //        dict.Add("PackageID", packageID.ToString());
        //        dict.Add("Path", pathToSave);


        //        RetInfo ret = new RetInfo();
        //        ret.result = "success";
        //        ret.data = dict;
        //        RetInfo[] retArr = { ret };
        //        return retArr;


        //    }
        //    catch (Exception ex)
        //    {
        //        RetInfo err = new RetInfo();
        //        err.result = "error";
        //        err.error = ex.Message;
        //        err.otherData = "createPackage";
        //        RetInfo[] retArr = { err };
        //        return retArr;
        //    }


        //}






        [Route("CompileActions")]
        [HttpPost]
        public async Task<RetInfo[]> CompileActions([FromBody] GBSendInfo info)
        {
            dynamic val2 = DateTime.Now.ToString();
            System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" {val2}.  I am in CompileActions. \r\n");


            try
            {
                clientUserInfo cred = new clientUserInfo();
                cred.sessionId = info.sessionId;
                cred.userName = info.user;


                if (!verify(cred))
                {
                    RetInfo err = new RetInfo();
                    err.result = "error";
                    err.error = "Validation Failed";
                    err.otherData = "compileActions";
                    RetInfo[] retArr = { err };
                    return retArr;
                }


                dynamic packageD;
                bool cOk = info.data.TryGetValue("packageID", out packageD);


                BillTestDBContext ct = new BillTestDBContext();
                BillTestDBContextProcedures ptc = new BillTestDBContextProcedures(ct);


                //Get list of actions by packageID
                Guid pID = Guid.Parse(packageD.ToString());


                List<DeployGetActionRowsbyPackageResult> dict = await ptc.DeployGetActionRowsbyPackageAsync(pID);




                RetInfo ret = new RetInfo();
                ret.result = "success";
                ret.data = dict;
                RetInfo[] retarr = { ret };
                return retarr;


            }
            catch (Exception ex)
            {
                System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" I errored in compile actions\r\n");


                RetInfo err = new RetInfo();
                err.result = "error";
                err.error = ex.Message;
                err.otherData = "createPackage";
                RetInfo[] retArr = { err };
                return retArr;
            }
        }






        [Route("ActionSwitchboard")]
        [HttpPost]
        public async Task<RetInfo[]> ActionSwitchboard([FromForm] string? infoReceive, List<IFormFile>? attachments)
        {


            //Actually this may not work
            //Trying to allow attachements to be null seems to be resulting in infoReceive to be null when there are no files.
            //The current fix is for the front-end to act as the switchboard. 
            // 9/30/2024 4:30 PM.




            string val2 = DateTime.Now.ToString();
            System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" {val2}.  I am in ActionSwitchboard. \r\n");
            // System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" This is info: {infoReceive}. \r\n");
            // System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" This is attachments: {attachments}. \r\n");


            try
            {


                TokSendInfo info = JsonConvert.DeserializeObject<TokSendInfo>(infoReceive);


                //These variables verify the user's credentials
                clientUserInfo cred = new clientUserInfo();
                cred.userName = info.user;
                cred.sessionId = info.sessionId;
                cred.password = info.token;
                cred.groups = Request.HttpContext.Connection.RemoteIpAddress.ToString();


                List<RetInfo> retarr = new();
                if (checkCred(cred))
                {
                   // System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" Through CheckCred \r\n");




                    List<RetInfo> results = new();
                    String package = info.data["packageID"].ToString();//guid
                    String save = info.data["save"].ToString(); //expecting string "true" or "false"
                    String execute = info.data["execute"].ToString(); //expecting string "true" or "false"
                    if (execute != "true" && attachments.IsNullOrEmpty())
                    {//for compiling actions
                        GBSendInfo knowledge = new();
                        knowledge.data.Add("packageID", package);


                        RetInfo[] dict = await CompileActions(knowledge);
                        retarr.Add(dict[0]);
                    }
                    else if (!attachments.IsNullOrEmpty())
                    {
                        RetInfo[] dict = await PackageSave(infoReceive, attachments);
                        if(dict.Length > 0)
                        {
                            foreach (RetInfo ret in dict)
                            {
                                retarr.Add(ret);
                            }
                        }
                        else
                        {
                            System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" {dict} \r\n");
                            RetInfo rett = new RetInfo();
                            rett.result = "success";
                            rett.data = "merde";
                            rett.error = "tell Richard to check this again";
                            RetInfo[] rettarr = { rett };
                            return rettarr;
                        }
                    }
                    else if (execute == "true" && attachments.IsNullOrEmpty())
                    {
                        List<string> clients = info.data["clientID"];


                        foreach (string cID in clients)
                        {
                            Dictionary<string, dynamic> sendData = new();
                            sendData.Add("clientID", cID);
                            sendData.Add("programID", info.data["programID"]);
                            sendData.Add("packageID", package);


                            GBSendInfo sending = new();
                            sending.sessionId = info.sessionId;
                            sending.user = info.user;
                            sending.data = sendData;


                            List<RetInfo> packageResults = (await RunPackage(sending)).ToList();
                            RetInfo clientResults = new RetInfo()
                            {
                                data = packageResults,
                                result = "success",
                                otherData = $"switchboard run package {cID}"
                            };
                            retarr.Add(clientResults);


                        }
                    }


                   


                    System.IO.File.AppendAllText(@"c:\accel\richard.txt", $"{retarr} \r\n");
                    return retarr.ToArray();
                }
                else
                {
                    System.IO.File.AppendAllText(@"c:\accel\richard.txt", $"Validation Error in PackageSave. \r\n");


                    RetInfo retV = new RetInfo();
                    retV.result = "error";
                    retV.data = "User Validation Error";


                    RetInfo[] retArrV = { retV };
                    return retArrV;
                }




            }
            catch (Exception ex)
            {
                System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" {ex.Message}.  I errored in Switchboard. \r\n");
                RetInfo err = new RetInfo();
                err.result = "error";
                err.error = ex.Message;


                err.extraData = ex.StackTrace;
                err.otherData = "ActionSwitchboard";
                RetInfo[] retArr = { err };
                return retArr;
            }




        }




        ////come back here
        [Route("CheckRun")]
        [HttpPost]
        public async Task<RetInfo[]> CheckRun([FromBody] TokSendInfo info)
        {
            string val2 = DateTime.Now.ToString();
            System.IO.File.AppendAllText(@"c:\accel\richard.txt", $"{val2} I'm in CheckRun\r\n");
            try
            {
                clientUserInfo cred = new clientUserInfo();
                cred.userName = info.user;
                cred.sessionId = info.sessionId;
                cred.password = info.token;
                cred.groups = Request.HttpContext.Connection.RemoteIpAddress.ToString();




                List<RetInfo> retreturn = new List<RetInfo>();


                if (checkCred(cred))
                {
                    BillTestDBContext ct = new BillTestDBContext();
                    BillTestDBContextProcedures ptc = new BillTestDBContextProcedures(ct);
                    //System.IO.File.AppendAllText(@"c:\accel\richard.txt", $"{info.data["UploadOptions"]}\r\n");
                    //UploadThird opts = JsonConvert.DeserializeObject<UploadThird>(info.data["UploadOptions"].ToString());
                    // List<PackageContent> rows = info.data["GridData"].ToList();


                    // UploadFourth sequence = JsonConvert.DeserializeObject<UploadFourth>(info.data["UploadOptions"].ToString());
                    UploadFourth fourSooth = JsonConvert.DeserializeObject<UploadFourth>(info.data["UploadOptions"].ToString());


                    List<KeyValueTemp>? GridData = JsonConvert.DeserializeObject<List<KeyValueTemp>>(fourSooth.GridData.ToString());


                    bool app = false;
                    bool script = false;
                    bool upload = false;
                    bool validated = true; //plan with validated is to essentially say "If I've had to supply or ask for anything, you're not validated"


                    //CheckRunResult dict = new();
                    //dict.clients = new List<clientResponse>();
                    CRRSecond dict = new();


                    List<ResourceInfo> PackageResources = new();


                    Dictionary<string, List<string>> Ponse = new(); // Will be Dictionary<rowID, List<clientIDs>> (clients which need resources for the row)




                    RetInfo[] firstInfo = await GetDeployActions();
                    RetInfo actionInfo = firstInfo[0];
                    if (actionInfo.result == "error" || actionInfo == null)
                    {//Make sure that default actions are returned
                        RetInfo err = new RetInfo();
                        err.result = "error";
                        err.error = "Something went wrong Getting Deploy Actions";
                        err.otherData = "RunPackage";
                        RetInfo[] retArrr = { err };
                        return retArrr;
                    }
                    List<ActionTypeData> actionTypes = actionInfo.data; //get list of action types


                    foreach (KeyValueTemp KVT in GridData)
                    {
                        List<ActionTypeData>? sortedTypes = actionTypes.Where(p => p.id == Guid.Parse(KVT.key.actionTypeID.ToString())).ToList(); //this should only ever return a single result
                        if (sortedTypes.Count > 1)
                        {
                            RetInfo err = new RetInfo();
                            err.result = "error";
                            err.error = "sortedTypes is greater than 1";
                            err.otherData = "CheckRun";
                            RetInfo[] retArrr = { err };
                            return retArrr;
                        }
                        ActionTypeData matches = sortedTypes.FirstOrDefault();


                        if (matches.type.ToLower() == "apppool")
                        {
                            app = true;


                        }
                        else if (matches.type.ToLower() == "script")
                        {
                            script = true;


                        }
                        if (matches.action.ToLower() == "upload")
                        {
                            upload = true;
                        }


                        foreach (KeyValue Valve in KVT.value)
                        {
                            Guid clientID = Guid.Parse(Valve.key);
                            Guid dictID = Guid.Parse(KVT.key.resourceDictID);
                            if (Valve.value.IsNullOrEmpty())
                            {
                                List<ResourceInfo> rowRes = await ptc.DeployResourceInfoByClientIdAndDictIdAsync(clientID, dictID);
                                if(rowRes.Count > 0)
                                {
                                    continue;
                                }
                                else
                                {
                                    string rowID = KVT.key.rowID.ToString();


                                    Valve.value = "REQUIRED";
                                    validated = false;


                                    if(Ponse[rowID] != null)
                                    {//If this row has already thrown an error, add this client to that error list.
                                        Ponse[rowID].Add(clientID.ToString());
                                    }
                                    else
                                    { //Else create a new error list with this rowID and client ID in a list
                                        List<string> temp = new();
                                        temp.Add(clientID.ToString());


                                        Ponse.Add(rowID, temp);
                                    }
                                }
                            }
                            else
                            {
                                continue; //just trust for now
                            }
                        }


                    }


                    //foreach (PackageContent row in opts.GridData)
                    //{//Figure out what data is needed for the package
                    //    List<ActionTypeData>? sortedTypes = actionTypes.Where(p => p.id == Guid.Parse(row.actionTypeID.ToString())).ToList(); //this should only ever return a single result
                    //    if (sortedTypes.Count > 1)
                    //    {
                    //        RetInfo err = new RetInfo();
                    //        err.result = "error";
                    //        err.error = "sortedTypes is greater than 1";
                    //        err.otherData = "CheckRun";
                    //        RetInfo[] retArrr = { err };
                    //        return retArrr;
                    //    }
                    //    ActionTypeData matches = sortedTypes.FirstOrDefault();
                    //    if (matches.type.ToLower() == "apppool")
                    //    {
                    //        app = true;
                            
                    //    }
                    //    else if (matches.type.ToLower() == "script")
                    //    {
                    //        script = true;
                            
                    //    }
                    //    if (matches.action.ToLower() == "upload")
                    //    {
                    //        upload = true;
                    //    }
                    //}




                    //    //foreach (string res in sequence.resources)
                    //    //{
                    //    //    Guid ResID = Guid.Empty;
                    //    //    bool isID = Guid.TryParse(res, out ResID);
                    //    //    if (isID)
                    //    //    {
                    //    //        List<ResourceInfo> dict2 = await ptc.DeployResourceInfoByClientIdAndDictIdAsync(client.clientID, ResID);
                    //    //        PackageResources.Add(dict2[0]);
                    //    //    }
                    //    //}


                    //    List<ResourceInfo> matching = PackageResources.Where(p => p.client_id == client.clientID).ToList();






                    //    clientResponse retOptions = new();
                    //    retOptions.clientID = client.clientID;
                    //    if (app == true && client.appPool.IsNullOrEmpty() == true)
                    //    {
                            
                    //        validated = false;
                    //        TokSendInfo intellect = new();
                    //        intellect.sessionId = info.sessionId;
                    //        intellect.user = info.user;
                    //        intellect.token = info.token;
                    //        intellect.data = new();
                    //        intellect.data.Add("clientID", client.clientID);




                    //        RetInfo[] knowledge = await GetAppPools(intellect);
                    //        if (knowledge[0].data != null)
                    //        {
                    //            retOptions.appPoolSuggestions = knowledge[0].otherData;
                    //            retOptions.appPool = "required";
                    //        }
                    //        else
                    //        {
                    //            retOptions.appPool = "required";


                    //        }


                    //    }
                    //    if (script == true && client.server.IsNullOrEmpty())
                    //    {


                    //        validated = false;
                    //        send.parameters["cmd"] = $"select * from deployServers dce where dce.clientid = '{client.clientID}' and status = 'active'";


                    //        List<deployServers> servers = await GetDataAsync<deployServers>(theEndpoint, send);


                    //        if (servers.IsNullOrEmpty())
                    //        {
                    //            retOptions.server = "required";
                    //        }
                    //        else
                    //        {
                    //            retOptions.server = "required";
                    //            retOptions.serverSuggestions = servers;
                    //        }
                    //    }
                    //    if (script == true && client.database.IsNullOrEmpty() )
                    //    {
                    //        validated = false;
                    //        send.parameters["cmd"] = $"select dce.* from deployDatabases dce join deployServers ds on dce.serverID = ds.id where ds.clientid = '{client.clientID}' and dce.status = 'active'";


                    //        List<deployDatabases> dataBases = await GetDataAsync<deployDatabases>(theEndpoint, send);
                    //        if (dataBases.IsNullOrEmpty())
                    //        {
                    //            retOptions.database = "required";
                    //        }
                    //        else
                    //        {
                    //            retOptions.databaseSuggestions = dataBases;
                    //        }


                    //        //retOptions.database = "required";
                    //    }
                       
                    //    if(upload == true)
                    //    {


                    //        if (client.endpoint.IsNullOrEmpty())
                    //        {
                    //            if (!match.endpoint.IsNullOrEmpty())
                    //            {
                    //                retOptions.endpoint = match.endpoint;
                    //            }
                    //            //if(PackageResources)
                    //            else
                    //            {
                    //                validated = false;
                    //                retOptions.endpoint = "required";
                    //            }
                    //            continue;
                    //        }
                    //        else if (!Path.IsPathFullyQualified(client.endpoint))
                    //        {
                    //            validated = false;
                    //            retOptions.endpoint = "required";
                    //            continue;
                    //        }
                    //        else
                    //        {
                    //            RetInfo err = new RetInfo();
                    //            err.result = "error";
                    //            err.error = "help";
                    //            err.otherData = "ReadyToRun";
                    //            RetInfo[] retArrr = { err };
                    //            return retArrr;
                    //        } 
                    //    }


                    //    retOptions.clientName = client.clientName;




                    //    dict.clients.Add(retOptions);
                    //}


                    dict.validated = validated;
                    dict.reqRowClients = Ponse;
                    


                    RetInfo ret = new RetInfo();
                    ret.result = "success";
                    ret.data = dict;
                    ret.otherData = "CheckRun";
                    System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" Done with CheckRun\r\n");


                    RetInfo[] retArr = { ret };
                    return retArr;
                }
                else
                {
                    System.IO.File.AppendAllText(@"c:\accel\richard.txt", $"Validation Error in ReadyToRun. \r\n");


                    RetInfo retV = new RetInfo();
                    retV.result = "error";
                    retV.data = "User Validation Error";


                    RetInfo[] retArrV = { retV };
                    return retArrV;
                }
            }
            catch (Exception ex)
            {
                System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" I errored in ReadyToRun\r\n");
                System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" {ex.Message}\r\n");
                System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" {ex.StackTrace}\r\n");


                RetInfo err = new RetInfo();
                err.result = "error";
                err.error = ex.Message;
                err.otherData = "ReadyToRun";
                RetInfo[] retArr = { err };
                return retArr;
            }
        }




        [Route("PackageSave")]
        [HttpPost]
        public async Task<RetInfo[]> PackageSave([FromForm] string? infoReceive, List<IFormFile>? attachments)
        {
            string val2 = DateTime.Now.ToString();


            System.IO.File.AppendAllText(@"c:\accel\richard.txt", $"{val2}.  I am in PackageSave. \r\n");
           
        try
        {
            TokSendInfo info = JsonConvert.DeserializeObject<TokSendInfo>(infoReceive);
                
            //These variables verify the user's credentials
            clientUserInfo cred = new clientUserInfo();
            cred.userName = info.user;
            cred.sessionId = info.sessionId;
            cred.password = info.token;
            cred.groups = Request.HttpContext.Connection.RemoteIpAddress.ToString();




                List<RetInfo> retreturn = new List<RetInfo>();


            if (checkCred(cred))
            {
                Crypt crypt = new Crypt();
                BillTestDBContext ct = new BillTestDBContext();
                BillTestDBContextProcedures ptc = new BillTestDBContextProcedures(ct);


                String package = info.data["packageID"].ToString();//guid
                String save = info.data["save"].ToString(); //expecting string "true" or "false"
                String execute = info.data["execute"].ToString(); //expecting string "true" or "false"


                var userD = System.Convert.FromBase64String(cred.userName);
                string userN = System.Text.Encoding.UTF8.GetString(userD);


                    
                string Dir = Directory.GetCurrentDirectory();
                string mainFolder = Dir + "\\UploadedPackages\\";
                string pathToSave = mainFolder + package;


                List<PackageContent> gridData = info.data["gridData"].ToObject<List<PackageContent>>();


                if (gridData.IsNullOrEmpty())
                {
                    RetInfo err = new RetInfo();
                    err.result = "error";
                    err.otherData = "packageSave";
                    err.error = $"no rows found in GridData";
                    RetInfo[] retArr = { err };
                    return retArr;
                }
                Guid packageID = Guid.Empty;
                if (Guid.TryParse(package, out packageID) == false)
                {
                    RetInfo err = new RetInfo();
                    err.result = "error";
                    err.otherData = "packageSave";
                    err.error = $"now packageID found";
                    RetInfo[] retArr = { err };
                    return retArr;
                }




                Directory.CreateDirectory(pathToSave);


                Dictionary<string, int> fileOrder = new();
                int count = 0;
                foreach (PackageContent content in gridData)
                {//get the order of files for later
                    fileOrder.Add(content.rowID, count);
                    count++;
                }




                foreach (IFormFile file in attachments)
                {
                    string? fullName = ContentDispositionHeaderValue.Parse(file.ContentDisposition).FileName;
                    if (fullName != null)
                    {
                        fullName = fullName.Trim();
                    }
                    else
                    {
                        RetInfo err = new RetInfo();
                        err.result = "error";
                        err.otherData = "packageSave";
                        err.error = $"no uplaod filename";
                        RetInfo[] retArr = { err };
                        return retArr;
                    }
                    FileInfo fi = new FileInfo(fullName);


                    string pathToSaveFile = (pathToSave + "\\" + file.FileName.ToString() + ""); //generate the save location of the file
                    using (var stream = new FileStream(pathToSaveFile, FileMode.Create))
                    {//save the file
                        file.CopyTo(stream);
                    }




                    List<PackageContent> rows = gridData.Where(i => i.fileName.ToLower() == file.FileName.ToLower()).ToList();
                    if (rows.Count == 0)
                    {
                        RetInfo err = new RetInfo();
                        err.result = "error";
                        err.otherData = "packageSave";
                        err.error = $"no rows found for file name {file.FileName}";
                        RetInfo[] retArr = { err };
                        return retArr;
                    }


                        


                    foreach (PackageContent row in rows)
                    {
                        int orderNumber = fileOrder[row.rowID];
                       // System.IO.File.AppendAllText(@"c:\accel\richard.txt", $"{row} \r\n");


                        Guid tfI = Guid.Empty;
                        if (Guid.TryParse(row.rowID, out tfI) == false)
                        {
                            System.IO.File.AppendAllText(@"c:\accel\richard.txt", $"rowID is null? \r\n");
                            RetInfo err = new RetInfo();
                            err.result = "error";
                            err.otherData = "packageSave";
                            err.error = $"hey, I wrote this error!";
                            RetInfo[] retArr = { err };
                            return retArr;
                        }


                        Guid thisFileID = tfI;


                        DeployFilesBatch upFile = new DeployFilesBatch(); //create a record of the file
                        upFile.fileName = file.FileName;
                        upFile.fileSize = file.Length;
                        upFile.batchID = packageID;
                        upFile.fileID = thisFileID;
                        upFile.status = "active";
                        upFile.path = pathToSaveFile;
                        


                        DeployPackageContentBatch packFile = new(); //create a package-content record of the file
                        packFile.id = Guid.NewGuid();
                        packFile.batchId = packageID;
                        packFile.contentId = Guid.NewGuid();
                        packFile.packageID = packageID;
                        if (row.resourceDictID.IsNullOrEmpty())
                        {
                            packFile.resource_dict_id = Guid.Empty;
                        }
                        else
                        {
                            packFile.resource_dict_id = Guid.Parse(row.resourceDictID);
                        }
                        
                        Guid ng = Guid.Empty;
                        if (Guid.TryParse(row.actionTypeID, out ng) == false)
                        {
                            RetInfo err = new RetInfo();
                            err.result = "error";
                            err.otherData = "packageSave";
                            err.error = $"no actionTypeID found";
                            RetInfo[] retArr = { err };
                            return retArr;
                        }


                        packFile.ActionTypeID = ng;
                        packFile.itemID = thisFileID;
                        packFile.orderSequence = orderNumber.ToString();
                        //Guid rd = Guid.Empty;
                        //if (Guid.TryParse(row.resourceDictID, out rd) == false)
                        //{
                        //    RetInfo err = new RetInfo();
                        //    err.result = "error";
                        //    err.otherData = "packageSave";
                        //    err.error = $"no resourceID found";
                        //    RetInfo[] retArr = { err };
                        //    return retArr;
                        //}
                        //packFile.resource_dict_id = rd; //resourceDictID into batch




                        if (save.ToLower() == "true")
                        {
                            string packageName = info.data["packageName"];
                            List<updateDeployPackagesResult> pCreate = await ptc.updateDeployPackagesAsync(packageName, packageID, userN);
                        }




                        filePackageData preppedFile = new filePackageData(); //combine them into a memory-record
                                                                                //preppedFile.fileCount = int.Parse(fileCount);
                        preppedFile.batchPath = pathToSave;
                        preppedFile.files.Add(upFile);
                        preppedFile.packages.Add(packFile);




                        //packageDict.Add(package, preppedFile); //save the memory record


                        await ct.BulkInsertAsync<DeployFilesBatch>(preppedFile.files);
                        await ct.BulkInsertAsync<DeployPackageContentBatch>(preppedFile.packages);
                    }


                }// end of processing grid rows into packageDict




                System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" {packageID}. . \r\n");
                //packageConfirm does not appear to be running while fileConfirm does.
                dynamic packageConfirm = await ptc.DeployPackageContentSaveBatchAsync(packageID);


                dynamic fileConfirm = await ptc.DeployFileSaveBatchAsync(packageID);




                if (execute.ToLower() == "true")
                {//For when we want to execute the package


                   JArray clientArray = info.data["clientID"];
                    if (clientArray.IsNullOrEmpty())
                    {
                        RetInfo err = new RetInfo();
                        err.result = "error";
                        err.otherData = "packageSave";
                        err.error = $"no clients found";
                        RetInfo[] retArr = { err };
                        return retArr;
                    }
                   string[] clients = clientArray.ToObject<string[]>();
                    
                   if (clients.Length == 0 || clients == null)
                    {
                        RetInfo err = new RetInfo();
                        err.result = "error";
                        err.otherData = "packageSave";
                        err.error = $"no clients found";
                        RetInfo[] retArr = { err };
                        return retArr;
                    }




                    foreach (string cID in clients)
                    {
                        Dictionary<string, dynamic> sendData = new();
                        sendData.Add("clientID", cID);
                        sendData.Add("programID", info.data["programID"]);
                        sendData.Add("packageID", package);
                        sendData.Add("clientOptions", info.data["clientOptions"]);


                        GBSendInfo sending = new();
                        sending.sessionId = info.sessionId;
                        sending.user = info.user;
                        sending.data = sendData;


                        List<RetInfo> PackageResultList = RunPackage(sending).Result.ToList();


                        RetInfo ClientReturnInfo = new RetInfo()
                        {
                            otherData = $"switchboard {cID}",
                            data = PackageResultList,
                            result = "success"
                        };
                        retreturn.Add(ClientReturnInfo);
                        System.IO.File.AppendAllText(@"c:\accel\richard.txt", $"retreturn in four: {retreturn.Count}\r\n");
                    }






                }
               // RetInfo[] retfinal = retreturn.ToArray();
                
                if (save.ToLower() != "true" && retreturn.Count > 0)
                {//If the package needs to be run without saving


                    System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" deleting in PackageSave\r\n");


                    foreach(string fi in Directory.GetFiles(pathToSave))
                    {
                        System.IO.File.Delete(fi);
                    }


                    System.IO.Directory.Delete(pathToSave,true);
                   


                    dynamic dict = await ptc.deployDropTemporaryPackagesAsync(packageID);
                }
               
                if(retreturn.Count == 0)
                {
                    RetInfo ret = new();
                    ret.result = "success";
                    ret.data = $"save: {save} run: {execute} package: {packageID}";
                    retreturn.Add(ret);
                }


                return retreturn.ToArray();


                }
            else
            {
                System.IO.File.AppendAllText(@"c:\accel\richard.txt", $"Validation Error in PackageSave. \r\n");


                RetInfo retV = new RetInfo();
                retV.result = "error";
                retV.data = "User Validation Error";


                RetInfo[] retArrV = { retV };
                return retArrV;
            }
        }
        catch (Exception ex)
        {
            System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" {ex.Message}.  I errored in PackageSave. \r\n");
            System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" {ex.StackTrace}.  I errored here. \r\n");
            RetInfo err = new RetInfo();
            err.result = "error";
            err.error = ex.Message;
            err.extraData = ex.StackTrace;
            err.otherData = "PackageSave";
            RetInfo[] retArr = { err };
            return retArr;
        }
        }




        [Route("RunPackage")]
        [HttpPost]
        public async Task<RetInfo[]> RunPackage(GBSendInfo info)
        {
            string val2 = DateTime.Now.ToString();
            System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" {val2}.  I am in RunPackage. \r\n");


            try
            {
                Crypt crypt = new Crypt();
                BillTestDBContext ct = new BillTestDBContext();
                BillTestDBContextProcedures ptc = new BillTestDBContextProcedures(ct);


                //data which comes from the front
                string? packageID = info.data["packageID"].ToString();//guid
                string clientD = info.data["clientID"].ToString(); //guid
               // string? programID = info.data["programID"].ToString(); //guid




                clientOptions options = info.data["clientOptions"]; //now accepting clientOptions


                if(options == null)
                {
                    RetInfo err = new RetInfo();
                    err.result = "error";
                    err.otherData = "RunPackage";
                    err.error = $" no options found";
                    RetInfo[] retArr = { err };
                    return retArr;
                }


                string server = options.server;
                string dataName = options.database;
                string endpoint = options.endpoint;




                Guid clientID = Guid.Empty;
                if (Guid.TryParse(clientD, out clientID) == false)
                {
                    RetInfo err = new RetInfo();
                    err.result = "error";
                    err.otherData = "RunPackage";
                    err.error = $"no no clientID found";
                    RetInfo[] retArr = { err };
                    return retArr;
                }
                //System.IO.File.AppendAllText(@"c:\accel\richard.txt", $"Just Before Knowledge {info.data.Count} \r\n");
                //data which comes from sql
                //GBSendInfo knowledge = new GBSendInfo()
                //{
                //    user = info.user
                //};
                //info.data.Add("packageID", packageID);
                RetInfo[] packageRetList = await CompileActions(info); //get the list of actions to be perfomed
                RetInfo packageInfo = packageRetList[0];


                if (packageInfo == null || packageInfo.data.Count == 0)
                {//check if null
                    RetInfo err = new RetInfo();
                    err.result = "error";
                    err.otherData = "runPackage";
                    err.error = $"No package Info found.";
                    RetInfo[] retArr = { err };
                    return retArr;
                }


                List<DeployGetActionRowsbyPackageResult> PackageActionRows = packageInfo.data; //reformat action list


                if (PackageActionRows == null || PackageActionRows.Count == 0)
                {//check if null
                    RetInfo err = new RetInfo();
                    err.result = "error";
                    err.otherData = "runPackage";
                    err.error = $"No usefulData found.";
                    RetInfo[] retArr = { err };
                    return retArr;
                }


                string pathToSave = Path.GetDirectoryName(PackageActionRows[0].itemPath); // get Package path from action list


                RetInfo[] firstInfo = await GetDeployActions();
                RetInfo actionInfo = firstInfo[0];
                if (actionInfo.result == "error" || actionInfo == null)
                {//Make sure that default actions are returned
                    RetInfo err = new RetInfo();
                    err.result = "error";
                    err.error = "Something went wrong Getting Deploy Actions";
                    err.otherData = "RunPackage";
                    RetInfo[] retArr = { err };
                    return retArr;
                }


                List<ActionTypeData> actionTypes = actionInfo.data; //get list of action types


                foreach (DeployGetActionRowsbyPackageResult row in PackageActionRows)
                {// iterate through each action


                    List<ActionTypeData>? sortedTypes = actionTypes.Where(p => p.id == row.actionTypeid).ToList(); //this should only ever return a single result
                    if(sortedTypes.Count > 1)
                    {//check for problems
                        RetInfo err = new RetInfo();
                        err.result = "error";
                        err.error = "sortedTypes is greater than 1";
                        err.otherData = "RunPackage";
                        RetInfo[] retArr = { err };
                        return retArr;
                    }


                    ActionTypeData packageCheck = sortedTypes.FirstOrDefault();


                    if (packageCheck.type.ToLower() == "package")
                    {//Add sub-package actions to the list of actions
                        int rowPosition = PackageActionRows.IndexOf(row);


                        //GBSendInfo intellect = new()
                        //{
                        //    user = info.user
                        //};
                        info.data.Remove("packageID");
                        info.data.Add("packageID", row.itemID.ToString());
                        RetInfo[] rowPackageList = await CompileActions(info); //this only returns 1
                        RetInfo rowPackage = rowPackageList[0];
                        if (rowPackage != null)
                        {//check for problems
                            RetInfo err = new RetInfo();
                            err.result = "error";
                            err.error = "rowPackage returned Null";
                            err.otherData = "RunPackage";
                            RetInfo[] retArr = { err };
                            return retArr;
                        }
                        else
                        {
                            List<DeployGetActionRowsbyPackageResult> usefuldata2 = rowPackage.data;


                            PackageActionRows.InsertRange(rowPosition, usefuldata2);
                        }
                    }
                }




                //List<getProgramsByClientResult> dict = await ptc.getProgramsByClientAsync(clientID); //get list of programs associated to the target client
                ////Then match the user-selected program to said list
                //List<getProgramsByClientResult>? matchingList = dict.Where(p => p.programID.ToString() == programID.ToString()).ToList(); //should only be one??
                //if (matchingList.Count > 1)
                //{
                //    RetInfo err = new RetInfo();
                //    err.result = "error";
                //    err.error = "matchingList is greater than 1";
                //    err.otherData = "RunPackage";
                //    RetInfo[] retArr = { err };
                //    return retArr;
                //}
                //getProgramsByClientResult matches = matchingList.FirstOrDefault();


                //string endpoint = matches.endpoint;




      //          string server = matches.server;
      //          string dataName = matches.databaseName;




                List<GetSpecificClientResult> locations = await ptc.GetSpecificClientAsync(clientID);


                if (locations.Count == 0)
                {//Check if null
                    RetInfo err = new RetInfo();
                    err.result = "error";
                    err.otherData = "runPackage";
                    err.error = $"no locations found";
                    RetInfo[] retArr = { err };
                    return retArr;
                }


                string location = locations[0].APILocation; //set the location that the HttpPost Call will be sent to
                string clientName = locations[0].clientName; //
                string Dir = Directory.GetCurrentDirectory();
                string mainFolder = Dir + "\\UploadedPackages\\";
                //create the zip file which will be sent to the target
                string zipFolder = mainFolder + "zipped\\";


               


                Directory.CreateDirectory(zipFolder);
                String zipped = zipFolder + packageID + clientName + ".zip"; 
                if (System.IO.File.Exists(zipped))
                {
                    System.IO.File.Delete(zipped);
                }
               
                ZipFile.CreateFromDirectory(pathToSave, zipped);
                if (endpoint.ToLower().Contains("deploymentrest"))
                {//Add the executable for self deployment


                   //System.IO.File.AppendAllText(@"c:\accel\richard.txt", $"boop  \r\n");
                    string exelocation = "C:\\inetpub\\wwwroot\\PackageUnzip";
                    string exeFold = mainFolder + "exeZip";
                    string exeZip = mainFolder + "exeZip\\SelfExecute.zip";
                    string packagedExe = pathToSave + "\\SelfExecute.zip";


                    //System.IO.File.AppendAllText(@"c:\accel\richard.txt", $"{exeZip}  \r\n");
                    Directory.CreateDirectory(exeFold);


                    FileInfo exeCheck = new(exeZip);
                    if (exeCheck.Exists)
                    {
                        exeCheck.Delete();
                    }


                    ZipFile.CreateFromDirectory(exelocation, exeZip); // 


                    using (FileStream zipToOpen = new(zipped, FileMode.Open, FileAccess.ReadWrite))
                    {
                        using (ZipArchive archive = new(zipToOpen, ZipArchiveMode.Update))
                        {
                            archive.CreateEntryFromFile(exeZip, Path.GetFileName(exeZip));
                        }
                    }




                   // System.IO.File.Copy(exeZip, packagedExe);


                    DeployGetActionRowsbyPackageResult act = new();
                    act.rowid = Guid.Empty;
                    act.actionTypeid = Guid.Empty;
                    act.orderSequence = "0";
                    act.itemID = Guid.Empty;
                    act.itemPath = packagedExe;
                    act.fileName = "SelfExecute.zip";
                    PackageActionRows.Add(act);


                }
               


                MultipartFormDataContent content = new MultipartFormDataContent();
                ByteArrayContent fileContent = new ByteArrayContent(System.IO.File.ReadAllBytes(zipped));
                content.Add(fileContent, "file", packageID + clientName + ".zip");
                content.Add(new StringContent(endpoint), endpoint); //endpoint 0
                content.Add(new StringContent(server), server); //endpoint 1
                content.Add(new StringContent(deploySecret), deploySecret); //2
                content.Add(new StringContent(dataName), dataName); //endpoint 3
                content.Add(new StringContent(JsonConvert.SerializeObject(PackageActionRows)), "usefuldata"); //4
                content.Add(new StringContent(JsonConvert.SerializeObject(actionInfo)), "actionInfo"); //5


                if (endpoint.ToLower().Contains("deploymentrest"))
                {//Make sure this is always after all other content.Add statements because it might not exist
                    List<getClientDataResult> clientData = await ptc.getClientDataAsync(clientID);


                    string domain = crypt.EncryptString(clientData[0].domain);
                    string userName = crypt.EncryptString(clientData[0].username);
                    string pwd = crypt.EncryptString(clientData[0].pwd);


                    content.Add(new StringContent(domain), domain);//6
                    content.Add(new StringContent(userName), userName);//7
                    content.Add(new StringContent(pwd), pwd);//8
                }


                HttpClient client = new();
                var response = await client.PostAsync(location + "ActionReceive", content);
                string resultString = await response.Content.ReadAsStringAsync();
    
                System.IO.File.Delete(zipped); //clean up 


                List<RetInfo>? result = JsonConvert.DeserializeObject<List<RetInfo>>(resultString);
                if (result == null)
                {
                    RetInfo err = new RetInfo();
                    err.result = "error";
                    err.error = "null results";
                    err.otherData = "ActionTabFinis `h";


                    return new RetInfo[] { err };
                }
                return result.ToArray();


            }
            catch (Exception ex)
            {
                System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" {ex.Message}.  I errored in RunPackage. \r\n");
                System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" {ex.StackTrace}.  I errored here. \r\n");
                RetInfo err = new RetInfo();
                err.result = "error"; 
                err.error = ex.Message;
                err.otherData = "RunPackage";




                RetInfo[] retArr = { err };
                return retArr;
            }
        }




        [Route("ActionReceive")]
        [HttpPost]
        public async Task<List<RetInfo>> ActionReceive()
        {




            string val2 = DateTime.Now.ToString();
            System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" {val2}.  I am in Action Receive. \r\n");
            try
            {




                IFormFileCollection files = Request.Form.Files;
                var header = Request.Form.Keys;
                StringValues usefuldatas;
                StringValues actionInfos;
                bool useful = Request.Form.TryGetValue("usefuldata", out usefuldatas);
                bool action = Request.Form.TryGetValue("actionInfo", out actionInfos);
                if (!useful || !action)
                {
                    RetInfo err = new RetInfo();
                    err.result = "error";
                    err.error = "not useful or not action";
                    err.data = "useful: " + useful;
                    err.error = "action: " + action;
                    err.otherData = "ActionReceive";
                    RetInfo[] retArrr = { err };
                    return retArrr.ToList();
                }
                string usefuldata = usefuldatas.FirstOrDefault();
                string actionInfo = actionInfos.FirstOrDefault();


                var urls = header.OfType<string>().ToList();


               // System.IO.File.AppendAllText(@"c:\accel\richard.txt", $"{urls[4]}.. \r\n");


                List<DeployGetActionRowsbyPackageResult> packageRows = JsonConvert.DeserializeObject<List<DeployGetActionRowsbyPackageResult>>(usefuldata); 
                RetInfo arrive = JsonConvert.DeserializeObject<RetInfo>(actionInfo);


             //   System.IO.File.AppendAllText(@"c:\accel\richard.txt", $"Arrive: { arrive.data.GetType()}\r\n");
              //  System.IO.File.AppendAllText(@"c:\accel\richard.txt", $"packageRow0: {packageRows[0]}\r\n");
                List<ActionTypeData> actionTypes = JsonConvert.DeserializeObject<List<ActionTypeData>>(arrive.data.ToString());
                    //arrive.data.ToObject<List<ActionTypeData>>() ;


       //         System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" urls processed \r\n");
                //check for verification
                if (urls[2] != deploySecret)
                {
                    RetInfo err = new RetInfo();
                    err.result = "error";
                    //ret.data = ;
                    List<RetInfo> retArr = new();
                    retArr.Add(err);
                    return retArr;
                }


                string Dir = Directory.GetCurrentDirectory();
                string programFolder = Dir + "\\ReceivedFiles\\";
                Directory.CreateDirectory(programFolder);
                string? pathToSave = null;
                string extractPath = null;
                string? zipFileName = null;


                foreach (var zipFile in files)
                {//Iterates through each file in the package
                    string fullName = ContentDispositionHeaderValue.Parse(zipFile.ContentDisposition).FileName.Trim().ToString();
                    FileInfo fi = new FileInfo(fullName);


                    zipFileName = zipFile.FileName.ToString();


                    String dir = Directory.GetCurrentDirectory();
                   // String mainDir = dir + "\\ReceivedStageTwo\\"; //destination subfolders?
                   // pathToSave = (mainDir + fi.Name.Trim('"'));




                    //if (!Directory.Exists(mainDir))
                    //{
                    //    Directory.CreateDirectory(mainDir);
                    //}


                    ////////////////////////


                    if (urls[0].ToLower().Contains("deploymentrest"))//deploying the deployment engine is different
                    {
                        string home = Directory.GetCurrentDirectory();
                        string before = Path.GetDirectoryName(home);
                        string temp = before + "\\deployTempFolder\\";


                        Directory.CreateDirectory(temp);


                        pathToSave = (temp + zipFile.FileName.ToString() + "");


                    }
                    else
                    {
                        pathToSave = (programFolder + zipFile.FileName.ToString() + ""); //generate the save location of the file right here
                    }
                    ////////////////////////
                    long fileSize = zipFile.Length;


                    using (var stream = new FileStream(pathToSave, FileMode.Create)) //save the zipfile
                    {
                        zipFile.CopyTo(stream);
                    }
                    //Unzip the zipFile


                    //System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" pathToSave: {pathToSave} \r\n");
                    extractPath = Path.GetDirectoryName(pathToSave);
                    ZipFile.ExtractToDirectory(pathToSave, extractPath, true);
                }
                if (pathToSave.IsNullOrEmpty())
                {
                    RetInfo err = new RetInfo();
                    err.result = "error";
                    err.error = "PathToSave error";
                    err.otherData = "ActionReceive";
                    List<RetInfo> retArr = new();
                    retArr.Add(err);
                    return retArr;
                }
                else
                {


                    //call to new function which accepts "gridData" in such a way that packages can be passed over.
                    //
                    List<RetInfo> dict = new();
                    foreach (DeployGetActionRowsbyPackageResult row in packageRows)
                    {
                       
                        string filePath = extractPath + "\\" + row.fileName; //the file is already here
                        if (row.fileName == "SelfExecute.zip")
                        {  //for the self deployment aspect
                            string endpoint = Path.GetDirectoryName(Dir) + "\\selfDeploy"; //final target for the file
                            System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" dir: {Dir} \r\n");




                            Directory.CreateDirectory(endpoint);
                           // string filePath = extractPath + "\\" + row.fileName; //the file is already here


                            if (!System.IO.File.Exists(filePath))
                            {
                                RetInfo err = new RetInfo();
                                err.result = "error";
                                err.error = "Something Wrong with the file path SELF DEPLOY";
                                err.otherData = "ActionReceive";
                                List<RetInfo> retArr = new();
                                retArr.Add(err);
                                return retArr;
                            }
                            try
                            {
                                ZipFile.ExtractToDirectory(filePath, endpoint, true);
                            //    System.IO.File.Move(filePath, endpoint + "\\" + row.fileName, true);


                            }
                            catch (Exception ex)
                            {
                                System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" filePath: {filePath} \r\n");
                                System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" destionationPath: {endpoint + "\\" + row.fileName} \r\n");


                                RetInfo err = new RetInfo();
                                err.result = "error";
                                err.error = ex.Message;
                                err.otherData = "ActionReceive";
                                List<RetInfo> retArr = new();
                                retArr.Add(err);
                                return retArr;


                            }
                            continue;
                        }


                        List<ActionTypeData>? sortedTypes = actionTypes.Where(p => p.id == row.actionTypeid).ToList(); //this should only ever return a single result
                        if (sortedTypes.Count > 1)
                        {
                            RetInfo err = new RetInfo();
                            err.result = "error";
                            err.error = "sortedTypes is greater than 1";
                            err.otherData = "RunPackage";
                            RetInfo[] retArr = { err };
                            return retArr.ToList();
                        }
                        ActionTypeData matches = sortedTypes.FirstOrDefault();


                        RetInfo ActionResult = new() //This will be added to the list for each action
                        {
                            otherData = $"actionResult: {matches.type}, {matches.action}",
                            result = "sucess"


                        };




                        if(matches.type.ToLower() == "appool")
                        {
                            string appPoolName = row.fileName;


                            var serverManager = new ServerManager();
                            var appPool = serverManager.ApplicationPools.FirstOrDefault(s => s.Name.Equals(appPoolName));


                            if (appPool == null)
                            {
                                // RetInfo err = new RetInfo();
                                ActionResult.result = "error";
                                ActionResult.data = "App Pool Not Found";
                                dict.Add(ActionResult);
                                continue;
                            }
                            ActionResult.data = appPool;
                            if (matches.action.ToLower() == "stop" && appPool.State != ObjectState.Stopped)
                            {
                                appPool.Stop();
                            }
                            if (matches.action.ToLower() == "start" && appPool.State != ObjectState.Started)
                            {
                                appPool.Start();
                            }
                            dict.Add(ActionResult);
                            continue;
                        }


                            switch (matches.action.ToLower())
                        {
                            


                            case "return":
                                {
                                    string pathName = row.fileName;
                                    string zipFilePath = programFolder + Path.GetFileName(pathName) + ".zip";
                                    if (matches.type.ToLower() == "file")
                                    {
                                        //get file
                                        FileInfo file = new(pathName);
                                        if (file.Exists != true)
                                        {
                                            ActionResult.error = $"{pathName} not found.";
                                            ActionResult.otherData = "ActionReceive";
                                            dict.Add(ActionResult);
                                            continue;


                                        }
                                        using (var zipArchive = ZipFile.Open(zipFilePath, ZipArchiveMode.Create))
                                        {
                                            zipArchive.CreateEntryFromFile(pathName, Path.GetFileName(pathName));
                                        }
                                        //return file


                                        //create a gridData
                                        List<ActionTypeData> uploadType = sortedTypes.Where(p => p.action == "upload" && p.type == "file").ToList();
                                        PackageContent retGrid = new();
                                        retGrid.rowID = Guid.NewGuid().ToString();
                                        retGrid.actionCommand = uploadType.FirstOrDefault().id.ToString();
                                        retGrid.fileName = pathName;
                                        retGrid.itemID = Guid.Empty.ToString();


                                        //create a multipart data content
                                        MultipartFormDataContent content = new();
                                        ByteArrayContent fileContent = new ByteArrayContent(System.IO.File.ReadAllBytes(zipFilePath));


                                        GBSendInfo si = new GBSendInfo();
                                        si.data.Add(zipFilePath, fileContent);
                                        si.data.Add("filePath", zipFilePath);
                                        si.data.Add("rowID", row.rowid);
                                        si.sessionId = deploySecret;


                                        //send the zip file
                                        HttpClient client = new();
                                        var response = await client.PostAsync("https://accel.accelcon.com/deploymentrest/deployment/" + "ActionReceive", content);
                                        //System.IO.File.AppendAllText(@"c:\accel\richard.txt", $"response: {response}\r\n");
                                        dynamic resp = await response.Content.ReadAsStringAsync();
                                        ActionResult = JsonConvert.DeserializeObject(resp);


                                    }
                                    else if (matches.type.ToLower() == "directory")
                                    {
                                        DirectoryInfo directory = new(pathName);
                                        
                                        if (directory.Exists != true)
                                        {
                                            ActionResult.error = $"{pathName} not found.";
                                             ActionResult.otherData = "ActionReceive";
                                            dict.Add(ActionResult);
                                            continue;
                                        }
                                        //create the zip file
                                        ZipFile.CreateFromDirectory(pathName, zipFilePath);


                                        //create a multipart data content
                                        MultipartFormDataContent content = new();
                                        ByteArrayContent fileContent = new ByteArrayContent(System.IO.File.ReadAllBytes(zipFilePath));


                                        GBSendInfo si = new GBSendInfo();
                                        si.data.Add(zipFilePath, fileContent);
                                        si.data.Add("filePath", zipFilePath);
                                        si.data.Add("rowID", row.rowid);
                                        si.sessionId = deploySecret;




                                        //send the zip file
                                        HttpClient client = new();
                                        var response = await client.PostAsync("https://accel.accelcon.com/deploymentrest/deployment/" + "ActionReceive", content);
                                        //System.IO.File.AppendAllText(@"c:\accel\richard.txt", $"response: {response}\r\n");
                                        dynamic resp = await response.Content.ReadAsStringAsync();
                                        ActionResult = JsonConvert.DeserializeObject(resp);
                                    }
                                    else if(matches.type.ToLower() == "script")
                                    {// script return should try to get a stored procedure from the designated sql server.
                                         
                                    }
                                  
                                    break;
                                }


                            case "upload":
                                {
                                    string endpoint = urls[0];
                                    Directory.CreateDirectory(endpoint); //creates folder if it doesn't exist


                                    //  string filePath = extractPath + "\\" + row.fileName;


                                    if (!System.IO.File.Exists(filePath))
                                    {
                                       
                                        ActionResult.result = "error";
                                        ActionResult.error = "Something Wrong with the file path";
                                        ActionResult.otherData = "ActionReceive";
                                        dict.Add(ActionResult);
                                    }
                                    try
                                    {
                                        System.IO.File.Move(filePath, endpoint + "\\" + row.fileName, true);


                                    }
                                    catch (Exception ex)
                                    {
                                        System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" filePath: {filePath} \r\n");
                                        System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" destionationPath: {endpoint + "\\" + row.fileName} \r\n");


                                        RetInfo err = new RetInfo();
                                        ActionResult.result = "error";
                                        ActionResult.error = ex.Message;
                                        ActionResult.otherData = "ActionReceive";
                                        dict.Add(ActionResult);
                                        continue;


                                    }


                                    if (Path.GetFileName(urls[0]).TrimEnd('\\').ToLower() == "deploymentrest")
                                    {
                                        zipFileName = row.fileName;
                                    }


                                    ActionResult.data = filePath;
                                    dict.Add(ActionResult);
                                    break;
                                }
                            case "run":
                                {
                                    if(matches.type.ToLower() == "script")
                                    {//For Running script files against the database
                                        string database = urls[3];
                                        string server = urls[1];


                                        List<string> paths = new List<string>();
                                        paths.Add(extractPath + "\\" + row.fileName); //[0]
                                        paths.Add(server); //server [1]
                                        paths.Add(database); //database [2]


                                        RetInfo[] dict2 = await ScriptExecute(paths, "no");
                                        //System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" dict2: {dict2.Length} \r\n");
                                        if (dict2[0] != null)
                                        {
                                            System.IO.File.Delete(extractPath + "\\" + row.fileName);
                                        }


                                        if (dict2[0].error != null)
                                        {
                                            ActionResult.result = "error";
                                            ActionResult.data = row;
                                            ActionResult.error = dict2[0].error;
                                            ActionResult.otherData = "ActionReceive";
                                            dict.Add(ActionResult);




                                        }
                                        dict.Add(dict2[0]);
                                    }
                                    else if (matches.type.ToLower() == "file")
                                    {//For Running CMD Files
                                        Process process = new Process();


                                        // Set the process start information
                                        process.StartInfo.FileName = "cmd.exe";
                                        process.StartInfo.Arguments = $"{filePath}"; //where the file was unzipped to
                                        process.StartInfo.RedirectStandardOutput = true;
                                        process.StartInfo.UseShellExecute = false;
                                        process.StartInfo.CreateNoWindow = true;


                                        // Start the process
                                        process.Start();


                                        // Read the output
                                        string output = process.StandardOutput.ReadToEnd();


                                        ActionResult.data = System.IO.File.ReadAllBytes(output);
                                        ActionResult.result = "success";


                                    }
                                    break;
                                }
                            default:
                                {
                                    ActionResult.result = "error";
                                    ActionResult.error = "Entered Case Default";
                                    ActionResult.data = row;
                                    dict.Add(ActionResult);
                                    break;
                                }
                        }
                    }
                    if (Path.GetFileName(urls[0]).TrimEnd('\\').ToLower() == "deploymentrest")
                    {
                        try
                        {


                            string mainFolder = Directory.GetCurrentDirectory();//because this is the selfDeploy mechanism


                            string pathToEXE = Path.GetDirectoryName(Dir) + "\\selfDeploy\\PackageUnzip.exe";


                            using (TaskService taskService = new TaskService())
                            {
                                if (taskService.GetTask("DeployManagementTask") != null)
                                {
                                    taskService.RootFolder.DeleteTask("DeployManagementTask");
                                }
                                TaskDefinition task = taskService.NewTask();
                                task.RegistrationInfo.Description = "Update Deploy Rest";


                                TimeTrigger timeTrigger = new TimeTrigger();
                                timeTrigger.StartBoundary = DateTime.Now.AddMinutes(2); // 2 minutes from now
                                task.Triggers.Add(timeTrigger);
                                task.Actions.Add(new ExecAction("powershell.exe", $"Stop-WebAppPool -Name \"deployPool\"", null));//Stop App Pool
                                task.Actions.Add(new ExecAction("powershell.exe", "Start-Sleep -Seconds 15", null)); //pause for 30 seconds
                                //string deleteCommand = $"/c Get-ChildItem -Path \"{mainFolder}\" -Recurse | Where-Object {{ $_.FullName -notlike '*\\UploadedPackages\\*' -and $_.FullName -notlike '*\\UploadedScripts\\*' }} | Remove-Item -Force";
                                //task.Actions.Add(new ExecAction("powershell.exe", deleteCommand, null)); //Should preserve the packages and scripts previously uploaded
                                // task.Actions.Add(new ExecAction("cmd.exe", $"del /q /f  \"{mainFolder}\\*.* "));
                                task.Actions.Add(new ExecAction("cmd.exe", $"/c rmdir /s /q \"{mainFolder}\"", null)); // delete mainFolder and its contents
                                task.Actions.Add(new ExecAction("cmd.exe", $"/c mkdir \"{mainFolder}\"", null));


                                task.Actions.Add(new ExecAction(pathToEXE, $"{pathToSave} {mainFolder}", null));
                                //task.Actions.Add(new ExecAction("powershell.exe", $"Expand-Archive -Path \"{pathToSave}\" -DestinationPath \"{mainFolder}\"",null)); //extract files to mainFolder
                                task.Actions.Add(new ExecAction("powershell.exe", "Start-Sleep -Seconds 30", null)); //pause for 30 seconds


                                task.Actions.Add(new ExecAction(pathToEXE, $"{mainFolder + "\\" + zipFileName} {mainFolder}", null));
                               // task.Actions.Add(new ExecAction("powershell.exe", $"Expand-Archive -Path \"{mainFolder + "\\" + zipFileName}\" -DestinationPath \"{mainFolder}\"", null)); //Unzip the zip file urls[7]
                                task.Actions.Add(new ExecAction("powershell.exe", "Start-Sleep -Seconds 30", null)); //pause for 30 seconds
                                task.Actions.Add(new ExecAction("powershell.exe", $"Start-WebAppPool -Name \"deployPool\"", null)); //Start App Pool
                                task.Actions.Add(new ExecAction("cmd.exe", $"/c del /q \"{pathToSave}\\*.*\"", null)); //delete the zip filecd  
                                task.Principal.LogonType = TaskLogonType.Password;
                                task.Principal.RunLevel = TaskRunLevel.Highest;
                                System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" Trying to create Task\r\n");
                                Crypt crypt = new Crypt();
                                string domain = crypt.DecryptString(urls[6].ToString());
                                string username = crypt.DecryptString(urls[7].ToString());
                                string pwd = crypt.DecryptString(urls[8].ToString());


                                taskService.RootFolder.RegisterTaskDefinition("DeployManagementTask", task, TaskCreation.Create, domain + "\\" + username, pwd, TaskLogonType.InteractiveTokenOrPassword);
                            };
                            RetInfo ret = new();
                            ret.data = "Task Creation Successful";
                            ret.result = "success";
                            
                            dict.Add(ret);




                        }
                        catch (Exception tex)
                        {
                            System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" error {tex.Message}\r\n");
                        }
                    }
                    //clean up zip files
                    if(Path.GetFileName(urls[0]).TrimEnd('\\').ToLower() != "deploymentrest")
                    {
                        FileInfo fi = new(pathToSave);
                        fi.Delete();
                    }
                    System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" I finished in Action Receive \r\n");
                    return dict;
                }




            }
            catch (Exception ex)
            {
                System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" {ex.Message}.  I errored in ActionReceive. \r\n");
                System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" {ex.StackTrace}.  I errored here. \r\n");
                RetInfo err = new RetInfo();
                err.result = "error";
                err.error = ex.Message;
                err.otherData = "ActionReceive";
                List<RetInfo> retArr = new();
                retArr.Add(err);
                return retArr;
            }
        }






        [Route("ReturnReceive")]
        [HttpPost]
        public async Task<RetInfo> ReturnReceive([FromBody] GBSendInfo info)
        {
            string val2 = DateTime.Now.ToString(); ;
            System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" {val2}. I am in ReturnReceive \r\n");


            try
            {
                if (info.sessionId != deploySecret)
                {
                    RetInfo err = new RetInfo();
                    err.result = "error";
                    err.error = "Validation Failed";
                    err.otherData = "createClient";
                    return err;
                }
                string fileName = info.data["filePath"];
                string rowID = info.data["rowID"].ToString();
                string dir = Directory.GetCurrentDirectory();
                string mainFolder = dir + "\\UploadedPackages\\";
                string pathToSave = mainFolder + "ReturnedRequests";
                Directory.CreateDirectory(pathToSave);


                string pathToSaveFile = pathToSave + Path.GetFileName(fileName);
                System.IO.File.WriteAllBytes(pathToSaveFile, info.data[fileName]);


                
                string finalPath = pathToSave + $"\\{val2}--{rowID}";
                DirectoryInfo directory = new(finalPath);


                ZipFile.ExtractToDirectory(pathToSaveFile, finalPath);


                RetInfo ret = new()
                {
                    result = "success",
                    data = finalPath,
                    otherData = "ReturnReceive"


                };
                return ret;


            }
            catch (Exception ex)
            {
                System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" {ex.Message}.  I errored in ActionReceive. \r\n");
                System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" {ex.StackTrace}.  I errored here. \r\n");
                RetInfo err = new RetInfo();
                err.result = "error";
                err.error = ex.Message;
                err.otherData = "ActionReceive";
                List<RetInfo> retArr = new();
                return err;
            }
        }






        [Route("ScriptExecute")]
        [HttpPost]
        private async Task<RetInfo[]> ScriptExecute(List<string> filePath, String local)
        {
            dynamic val2 = DateTime.Now.ToString();
            System.IO.File.AppendAllText(@"c:\accel\richard.txt", $"{val2} I'm in Script Execute. \r\n");
            //System.IO.File.AppendAllText(@"c:\accel\richard.txt", $"{filePath[0]} This is filePath. \r\n");
            try
            {
                //First I get the connenction string from appsettings
                IConfigurationRoot configuration = new ConfigurationBuilder()
                    .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
                    .AddJsonFile("appsettings.json")
                     .Build();


                //Afterwords I grab the script text from the file
                string script = System.IO.File.ReadAllText(filePath[0]);
                //Lastly I execute the query. 


                string[] pathSplit = filePath[0].Split('.');


                string dir = Directory.GetCurrentDirectory();
                string mainfolder = dir + "\\ScriptResults\\";
                Directory.CreateDirectory(mainfolder);


                string newPath = mainfolder + Path.GetFileName(pathSplit[0]) + "Out.txt";
                if (local == "yes") //this checks to see if an executable script is running
                {
                    newPath = pathSplit[0] + DateTime.Now.ToString("yyyyMMddHHmmss") + "Executable.sql";
                }


                Process process = new Process();


                ProcessStartInfo startInfo = new ProcessStartInfo("cmd.exe", "/c" + $"sqlcmd -S {filePath[1]} -d {filePath[2]} -i {filePath[0]} -o {newPath} ");
                startInfo.Verb = "runas";
                process.StartInfo = startInfo;
                process.Start();
                process.WaitForExit();
                dynamic ExitVariable = process.ExitCode;
                if (ExitVariable != 0)
                {
                    System.IO.File.AppendAllText(@"c:\accel\richard.txt", $"{ExitVariable} I errored in Script Execute. \r\n");
                    RetInfo err = new RetInfo();
                    err.result = "error";
                    err.otherData = "ExecuteScript";
                    err.error = "Something Went Wrong Trying To Execute the Script";
                    return new List<RetInfo>() { err }.ToArray();
                }
               


                RetInfo ret = new RetInfo();
                ret.result = "success";


                if (local == "yes")
                {
                    ret.data = newPath;


                }
                else
                {
                    ret.data = Path.GetFileName(filePath[0]);
                    ret.extraData = newPath;
                }
                FileInfo fi = new(newPath);
                if(fi.Length == 0)
                {
                    System.IO.File.Delete(newPath);
                }


                System.IO.File.AppendAllText(@"c:\accel\richard.txt", $"{ret} Finished in Script Execute. \r\n");
                RetInfo[] retArr = { ret };
                return retArr;
            }
            catch (Exception ex)
            {
                System.IO.File.AppendAllText(@"c:\accel\richard.txt", $"{ex.Message} I errored in Script Execute. \r\n");
                RetInfo err = new RetInfo();
                err.result = "error";
                err.otherData = "ExecuteScript";
                err.error = ex.Message;
                return new List<RetInfo>() { err }.ToArray();
            }
        }




        [Route("createClient")]
        [HttpPost]
        public async Task<RetInfo[]> createClient([FromBody] GBSendInfo info)
        {
            try
            {


                clientUserInfo cred = new clientUserInfo();
                cred.sessionId = info.sessionId;
                cred.userName = info.user;


                if (!verify(cred))
                {
                    RetInfo err = new RetInfo();
                    err.result = "error";
                    err.error = "Validation Failed";
                    err.otherData = "createClient";
                    RetInfo[] retErr = { err };
                    return retErr;
                }




                BillTestDBContext ct = new BillTestDBContext();
                BillTestDBContextProcedures ptc = new BillTestDBContextProcedures(ct);
                String cName = info.data["clientName"].ToString();
                String cState = info.data["state"].ToString();
                String cTimeZone = info.data["timezone"].ToString();
                String APILocation = info.data["apiLocation"].ToString();
                String apiFinal = "";
                string server = info.data["server"].ToString();
                string database = info.data["database"].ToString();
                string type = "default"; //hardcoded because this is presumably the first one entered.


                APILocation = APILocation.TrimEnd('/');
                apiFinal = APILocation + "/DeploymentRest/deployment/";


                var userD = System.Convert.FromBase64String(cred.userName);
                string userN = System.Text.Encoding.UTF8.GetString(userD);


                List<UpdateDepClientsResult> dict = await ptc.UpdateDepClientsAsync(cName, cState, cTimeZone, apiFinal, "yes", userN);


                if (dict[0].clientID != null)
                {
                    dynamic dict2 = await ptc.insertDataServersAsync(dict[0].clientID, server, database, type, userN);
                }
                else
                {
                    throw new Exception("Something went wrong creating the client");
                }




                RetInfo ret = new RetInfo();
                ret.result = "success";
                ret.data = dict;
                RetInfo[] retArr = { ret };
                return retArr;


            }
            catch (Exception ex)
            {
                RetInfo err = new RetInfo();
                err.result = "error";
                err.error = ex.Message;
                err.otherData = "createClient";
                RetInfo[] retArr = { err };
                return retArr;
            }
        }




        [Route("AddResource")]
        [HttpPost]
        public async Task<RetInfo[]> AddResource([FromBody] GBSendInfo info)
        {
            try
            {


                clientUserInfo cred = new clientUserInfo();
                cred.sessionId = info.sessionId;
                cred.userName = info.user;


                if (!verify(cred))
                {
                    RetInfo err = new RetInfo();
                    err.result = "error";
                    err.error = "Validation Failed";
                    err.otherData = "AddResource";
                    RetInfo[] retErr = { err };
                    return retErr;
                }
                BillTestDBContext ct = new BillTestDBContext();
                BillTestDBContextProcedures ptc = new BillTestDBContextProcedures(ct);


                ResourceData resD = JsonConvert.DeserializeObject<ResourceData>(info.data["data"].ToString()); //json convert this on Monday 10/18/2024 -Richard




                List<dynamic> results = new();


                List<string> clients = resD.clients;
                string? dictionaryID = resD.dict_id;
                string? resName = resD.resourceName;
                string? typeID = resD.resourceType;
                string? value = resD.value;




               // List<string> clients = info.data["clientID"];
               //  dynamic value;
               ////  dynamic clientID;
               //  dynamic dictionaryID;
               // dynamic resName = null;
               // dynamic typeID = null;
               //   bool vOk = info.data.TryGetValue("value", out value);
               ////   bool cOk = info.data.TryGetValue("clientID", out clientID);
               //   bool dOk = info.data.TryGetValue("dictionaryID", out dictionaryID);
               //   bool rOk = info.data.TryGetValue("resourceName", out resName);
               //   bool tOk = info.data.TryGetValue("typeID", out typeID);


                //if (!vOk  || !dOk) //|| !cOk
                //{
                //    RetInfo err = new RetInfo();
                //    err.result = "error";
                //    err.error = "value not found";
                //    err.otherData = "AddResource";
                //    RetInfo[] retArr = { err };
                //    return retArr;
                //}
                foreach(string client in clients) //clients not set
                {
                    Guid cID = Guid.Empty;
                    if (Guid.TryParse(client, out cID) == false)
                    {
                        RetInfo err = new RetInfo();
                        err.result = "error";
                        err.otherData = "AddResource";
                        err.error = $"no clientID found";
                        RetInfo[] retArr = { err };
                        return retArr;
                    }




                    Guid dictID = Guid.Empty;
                    if (Guid.TryParse(dictionaryID, out dictID) == false)
                    {
                        RetInfo err = new RetInfo();
                        err.result = "error";
                        err.otherData = "AddResource";
                        err.error = $"no dictionaryID found";
                        RetInfo[] retArr = { err };
                        return retArr;
                    }


                    Guid tID = Guid.Empty;
                    if (Guid.TryParse(typeID, out tID) == false && resName != null)
                    {
                        RetInfo err = new RetInfo();
                        err.result = "error";
                        err.otherData = "AddResource";
                        err.error = $"no TypeID found";
                        RetInfo[] retArr = { err };
                        return retArr;


                    }


                    //and/or add resource to deployresources
                    dynamic dict = await ptc.DeployUpdateResourcesAsync(value, cID, dictID, resName, tID);
                    results.Add(dict);
                }






                RetInfo ret = new RetInfo();
                ret.result = "success";
                ret.data = results;
                RetInfo[] retArrr = { ret };
                return retArrr;




                
            }
            catch (Exception ex)
            {


                System.IO.File.AppendAllText(@"c:\accel\richard.txt", $"I Errored in AddResource {ex.Message} \r\n");
                System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" {ex.StackTrace} \r\n");
                RetInfo err = new RetInfo();
                err.result = "error";
                err.error = ex.Message;
                err.extraData = ex.StackTrace;
                err.otherData = "AddResource";
                RetInfo[] retArr = { err };
                return retArr;
            }
        }


        [Route("GetResourceDictionary")]
        [HttpPost]
        public async Task<RetInfo[]> GetResourceDictionary([FromBody] TokSendInfo info)
        {
             dynamic val2 = DateTime.Now.ToString();
            System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" {val2}.  I am in GetResourceDictionary. \r\n");
            try
            {


                BillTestDBContext ct = new BillTestDBContext();
                BillTestDBContextProcedures ptc = new BillTestDBContextProcedures(ct);




                //send = new sendInfoBill();
                //send.parameters = new Dictionary<string, dynamic> { { "cmd", "" } };
                //send.u = System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes("richard.shirley"));
                //send.p = System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes("T0day92821!"));


                //send.parameters["cmd"] = $"select * from deploy_resource_dict where  status = 'active'"; //type_id = '{resType}' and




                Guid typeID = Guid.Parse(info.data["typeID"].ToString());
                List<DeployGetResourceDictByTypeResult> dict = await ptc.DeployGetResourceDictByTypeAsync(typeID);
                //List<ResourceInfo> dict = await ptc.DeployResourceInfoByResourceTypeIdAsync(typeID);




                RetInfo ret = new RetInfo();
                ret.result = "success";
                ret.data = dict;
                RetInfo[] retArr = { ret };
                return retArr;


            }
            catch (Exception ex)
            {
               
                System.IO.File.AppendAllText(@"c:\accel\richard.txt", $"Error in GetResourceDictionary: {ex.Message} \r\n");


                RetInfo err = new RetInfo();
                err.result = "error";
                err.error = ex.Message;
                err.extraData = ex.StackTrace;
                err.otherData = "GetResourceDictionary";
                RetInfo[] retArr = { err };
                return retArr;
            }
        }


        [Route("GetResourceTypes")]
        [HttpPost]
        public async Task<RetInfo[]> GetResourceTypes()
        {
            dynamic val2 = DateTime.Now.ToString();
            System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" {val2}.  I am in GetResourceTypes. \r\n");
            try
            {
                string query = $"select * from deploy_resource_type_dict where status = 'active'";
                BillTestDBContext ct = new BillTestDBContext();
                BillTestDBContextProcedures ptc = new BillTestDBContextProcedures(ct);
                send = new sendInfoBill();
                send.parameters = new Dictionary<string, dynamic> { { "cmd", "" } };
                send.u = System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes("richard.shirley"));
                send.p = System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes("T0day92821!"));


                send.parameters["cmd"] = $"select * from deploy_resource_type_dict where status = 'active'";


                string conString = configuration.GetSection("ConnectionString").GetSection("Default").Value;


                List<deploy_resource_type_dict> dict = new();


                using (SqlConnection connection = new SqlConnection(conString))
                {
                    SqlCommand command = new SqlCommand(query, connection);
                    connection.Open();
                    SqlDataReader reader = command.ExecuteReader();
                    while (reader.Read())
                    {
                        deploy_resource_type_dict type = new deploy_resource_type_dict
                        {
                            id = reader.GetGuid(reader.GetOrdinal("id")),
                            resource_type = reader.GetString(reader.GetOrdinal("resource_type")),
                            cdate = reader.IsDBNull(reader.GetOrdinal("cdate")) ? (DateTime?)null : reader.GetDateTime(reader.GetOrdinal("cdate")),
                            cuser = reader.IsDBNull(reader.GetOrdinal("cuser")) ? null : reader.GetString(reader.GetOrdinal("cuser")),
                            mdate = reader.IsDBNull(reader.GetOrdinal("mdate")) ? (DateTime?)null : reader.GetDateTime(reader.GetOrdinal("mdate")),
                            muser = reader.IsDBNull(reader.GetOrdinal("muser")) ? null : reader.GetString(reader.GetOrdinal("muser")),
                            status = reader.IsDBNull(reader.GetOrdinal("status")) ? null : reader.GetString(reader.GetOrdinal("status"))
                        };
                        dict.Add(type);
                    }
                }






                 //   List<deploy_resource_type_dict> dict = await GetDataAsync<deploy_resource_type_dict>(theEndpoint, send);
                


                RetInfo ret = new RetInfo();
                ret.result = "success";
                ret.data = dict;
                RetInfo[] retArr = { ret };
                return retArr;
            }
            catch (Exception ex)
            {




                System.IO.File.AppendAllText(@"c:\accel\richard.txt", $"I errored in GetResourceTypes {ex.Message}\r\n");
                RetInfo err = new RetInfo();
                err.result = "error";
                err.error = ex.Message;
                err.extraData = ex.StackTrace;
                err.otherData = "GetResourceTypes";
                RetInfo[] retArr = { err };
                return retArr;
            }
        }


        [Route("GetClientResource")]
        [HttpPost]
        public async Task<RetInfo[]> GetClientResource([FromBody] GBSendInfo info)
        {
            try
            {
                BillTestDBContext ct = new BillTestDBContext();
                BillTestDBContextProcedures ptc = new BillTestDBContextProcedures(ct);
                Guid clientID = Guid.Parse(info.data["clientID"].ToString());
                Guid dictID = Guid.Parse(info.data["dictionaryID"].ToString());


                //send = new sendInfoBill();
                //send.parameters = new Dictionary<string, dynamic> { { "cmd", "" } };
                //send.u = System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes("richard.shirley"));
                //send.p = System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes("T0day92821!"));


                //send.parameters["cmd"] = $"select * from deploy_resource dr where dr.client_id = '{clientID}' and dr.dict_id = '{dictID}' and status = 'active'";


                //List<deploy_resource_type_dict> dict = await GetDataAsync<deploy_resource_type_dict>(theEndpoint, send);


                List<ResourceInfo> dict = await ptc.DeployResourceInfoByClientIdAndDictIdAsync(clientID, dictID);




                RetInfo ret = new RetInfo();
                ret.result = "success";
                ret.data = dict;
                RetInfo[] retArr = { ret };
                return retArr;
            }
            catch (Exception ex)
            {
                RetInfo err = new RetInfo();
                err.result = "error";
                err.error = ex.Message;
                err.extraData = ex.StackTrace;
                err.otherData = "GetResources";
                RetInfo[] retArr = { err };
                return retArr;
            }
        }






        [Route("GetAllPrograms")]
        [HttpPost]
        public async Task<RetInfo[]> getAllPrograms()
        {
            try
            {
                BillTestDBContext ct = new BillTestDBContext();
                BillTestDBContextProcedures ptc = new BillTestDBContextProcedures(ct);


                List<getDeployProgramsResult> dict = await ptc.getDeployProgramsAsync();




                RetInfo ret = new RetInfo();
                ret.result = "success";
                ret.data = dict;
                RetInfo[] retArr = { ret };
                return retArr;


            }
            catch (Exception ex)
            {
                RetInfo err = new RetInfo();
                err.result = "error";
                err.error = ex.Message;
                err.otherData = "getAllPrograms";
                RetInfo[] retArr = { err };
                return retArr;
            }
        }


        //[Route("GetProgramStatus")] //Used currently to get information about the most recent program uploads
        //[HttpPost]
        //public async Task<RetInfo[]> GetProgramStatus()
        //{
        //    try
        //    {
        //        BillTestDBContext ct = new BillTestDBContext();
        //        BillTestDBContextProcedures ptc = new BillTestDBContextProcedures(ct);


        //        List<deployProgramStatusResult> dict = await ptc.deployProgramStatusAsync();




        //        var groupedClients = dict.GroupBy(r =>  new { r.programName, r.muser, r.mdate, r.currentPackage }).Select(g => new deployProgramStatusResult
        //        {
        //            programName = g.Key.programName,
        //            clientName = String.Join(", ", g.Select(r => r.clientName)),
        //            currentPackage = g.Key.currentPackage,
        //            muser = g.Key.muser,
        //            mdate = g.Key.mdate
        //        });




        //        RetInfo ret = new RetInfo();
        //        ret.result = "success";
        //        ret.data = groupedClients;
        //        //ret.data = dict;
        //        RetInfo[] retArr = { ret };
        //        return retArr;


        //    }
        //    catch (Exception ex)
        //    {
        //        RetInfo err = new RetInfo();
        //        err.result = "error";
        //        err.error = ex.Message;
        //        err.otherData = "getAllPrograms";
        //        RetInfo[] retArr = { err };
        //        return retArr;
        //    }
        //}








        [Route("associateProgram")]
        [HttpPost]
        public async Task<RetInfo[]> associateProgram([FromBody] GBSendInfo info)
        {


            //dynamic val2 = DateTime.Now.ToString();
            //System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" {val2}.  I am in associate Programs. \r\n");
            //String val = Newtonsoft.Json.JsonConvert.SerializeObject(info.data);
            //System.IO.File.AppendAllText(@"c:\accel\richard.txt", $"{val} \r\n");
            try
            {


                clientUserInfo cred = new clientUserInfo();
                cred.sessionId = info.sessionId;
                cred.userName = info.user;


                if (!verify(cred))
                {
                    RetInfo err = new RetInfo();
                    err.result = "error";
                    err.error = "Validation Failed";
                    err.otherData = "associateProgram";
                    RetInfo[] retErr = { err };
                    return retErr;
                }




                BillTestDBContext ct = new BillTestDBContext();
                BillTestDBContextProcedures ptc = new BillTestDBContextProcedures(ct);
                // Initalize the variables
                dynamic prog;
                dynamic clientD;
                dynamic progLocal;
                bool cOk = info.data.TryGetValue("clientID", out clientD);
                bool progOk = info.data.TryGetValue("programName", out prog);
                bool packOk = info.data.TryGetValue("programLocation", out progLocal);


                if (cOk != true || progOk != true || packOk != true)
                {
                    RetInfo err = new RetInfo();
                    err.result = "error";
                    err.data = new String[] { cOk.ToString(), progOk.ToString(), progLocal.ToString() };
                    err.error = "Could not initalize a variable";
                    //  err.extraData = new String[] { clientD.ToString(), progLocal.ToString() };
                    err.otherData = "associateProgramPreCheck";
                    RetInfo[] retArr2 = { err };
                    return retArr2;
                }




                List<String> results = null;
                String programName = info.data["programName"].ToString();
                String clientID = info.data["clientID"].ToString();
                String mainUrl = info.data["programLocation"].ToString();
            //    string serverName = info.data["server"].ToString();
             //   string dataName = info.data["database"].ToString();


                var userD = System.Convert.FromBase64String(cred.userName);
                string userN = System.Text.Encoding.UTF8.GetString(userD);


                int index = mainUrl.LastIndexOf("\\");
                String halfUrl = mainUrl.Substring(0, index);
                //tring[] urls = mainUrl.Split("\\");


                mainUrl = mainUrl.TrimEnd('\\');
                //halfUrl = halfUrl.TrimEnd('\\');
                //String backupUrl = halfUrl + "\\" + programName + "Backup";
                //String applicationPool = info.data["applicationPool"].ToString();


                Guid cID = new Guid(clientID);


                dynamic progID;


                //create the program entry in SQL if it doesn't exist
                dynamic dict3 = await ptc.UpdateDeployedProgramsAsync(programName);


                //get list of all programs from SQL
                List<getDeployProgramsResult> dict = await ptc.getDeployProgramsAsync();


                foreach (var result in dict)
                {


                    if (result.programName == programName)
                    {
                        //If program is found, associate the program to the client
                        progID = result.programID;
                        String progLocation = mainUrl; //+ "\\" + programName
                        dynamic dict2 = await ptc.UpdateClientProgramsAsync(progID, cID, progLocation, "none", userN);


                    }
                }




                RetInfo ret = new RetInfo();
                ret.result = "success";
                // ret.data = results;
                RetInfo[] retArr = { ret };
                return retArr;


            }
            catch (Exception ex)
            {
                RetInfo err = new RetInfo();
                err.result = "error";
                err.error = ex.Message;
                err.otherData = "associateProgram";


                RetInfo[] retArr = { err };
                return retArr;
            }
        }




        //[Route("UploadBetter")]
        //[HttpPost]
        //public async Task<RetInfo[]> UploadBetter([FromBody] TokSendInfo info)
        //{
        //    try
        //    {
        //        BillTestDBContext ct = new BillTestDBContext();
        //        BillTestDBContextProcedures ptc = new BillTestDBContextProcedures(ct);


        //        string Dir = Directory.GetCurrentDirectory();
        //        string mainFolder = Dir + "\\UploadedPackages\\";
        //        Directory.CreateDirectory(mainFolder);




        //        IFormFileCollection files = Request.Form.Files; //Putting a bereakpoint on this line will always cause an error. Otherwise it is fine.
        //        string fileName = Request.Form["fileName"];
        //        string packageUser = Request.Form["userName"];
        //        dynamic? safeFiles = Request.Form["safeFiles"];
        //        dynamic? safeFolders = Request.Form["safeFolders"];
        //        string packageFolder = mainFolder + fileName + '\\';
        //        string pathToSave = null;
        //        List<updateDeployPackagesResult> dict = await ptc.updateDeployPackagesAsync(fileName, packageUser, "active", safeFiles, safeFolders); //Add the package to SQL


        //        Directory.CreateDirectory(packageFolder);


        //        foreach (var file in files)
        //        {
        //            string fullName = ContentDispositionHeaderValue.Parse(file.ContentDisposition).FileName.Trim().ToString();
        //            FileInfo fi = new FileInfo(fullName);
        //            pathToSave = (packageFolder + file.FileName.ToString() + ""); //generate the save location of the file
        //            long fileSize = file.Length;
        //            using (var stream = new FileStream(pathToSave, FileMode.Create))
        //            {
        //                file.CopyTo(stream);
        //            }
        //            dynamic dictTwo = await ptc.UpdatePackageFilesAsync(file.FileName, fileName, fileSize, "active");


        //        }


        //        RetInfo ret = new RetInfo();
        //        ret.result = "success";
        //        ret.data = pathToSave;
        //        ret.otherData = dict;
        //        RetInfo[] retArr = { ret };
        //        return retArr;
        //    }
        //    catch (Exception ex)
        //    {
        //        RetInfo err = new RetInfo();
        //        err.result = "error";
        //        err.error = ex.Message;
        //        err.otherData = "Upload Better";


        //        RetInfo[] retArr = { err };
        //        return retArr;
        //    }
        //}


        [Route("DeployBetter")] //a semi-copy of DeployMain to help me wrap my head around not using packages to deploy
        [HttpPost]
        public async Task<RetInfo[]> DeployBetter([FromBody] TokSendInfo info)
        {
            dynamic val2 = DateTime.Now.ToString();
            System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" {val2}.  I am in Deploy Main. \r\n");
            try
            {
                //These variables verify the user's credentials
                clientUserInfo cred = new clientUserInfo();
                cred.userName = info.user;
                cred.sessionId = info.sessionId;
                cred.password = info.token;
                cred.groups = Request.HttpContext.Connection.RemoteIpAddress.ToString();




                if (checkCred(cred))
                {
                    Crypt crypt = new Crypt();
                    BillTestDBContext ct = new BillTestDBContext();
                    BillTestDBContextProcedures ptc = new BillTestDBContextProcedures(ct);




                    //Intialize directory variables
                    dynamic resp = null;
                    List<Dictionary<string, dynamic>> retdict = new List<Dictionary<string, dynamic>>();


                    dynamic type;


                    dynamic clientD;
                    bool cOk = info.data.TryGetValue("clientID", out clientD);


                    dynamic startPoint;
                    bool startOk = info.data.TryGetValue("startLocation", out startPoint);


                    //deploy File variables
                    dynamic endPoint;
                    bool endOK = info.data.TryGetValue("endPoint", out endPoint);
                    dynamic appPool;
                    bool appOk = info.data.TryGetValue("appPool", out appPool);
                    dynamic delCheck;
                    bool delOk = info.data.TryGetValue("delCheck", out delCheck);


                    //deploy Script variables
                    dynamic server;
                    bool serverOK = info.data.TryGetValue("server", out server);
                    dynamic database;
                    bool baseOK = info.data.TryGetValue("database", out database);


                    if (cOk != true || startOk != true) //
                    {
                        RetInfo err = new RetInfo();
                        err.result = "error";
                        err.data = new String[] { cOk.ToString(), startOk.ToString() }; //, endOK.ToString(), appOk.ToString(), delOk.ToString()
                        err.error = "Could not initalize a variable";
                        err.otherData = "DeployMainPreCheck";
                        RetInfo[] retArr2 = { err };
                        return retArr2;
                    }


                    if (endOK == true && appOk == true && delOk == true) //check which type of usecase has been selected
                    {
                        type = "fileUpdate";
                    }
                    else if (serverOK == true && baseOK == true)
                    {
                        type = "scriptUpdate";
                    }
                    else
                    {
                        RetInfo err = new RetInfo();
                        err.result = "error";
                        err.data = "Something went wrong";
                        err.error = "Could not initalize a variable";
                        err.otherData = "DeployMainPreCheck";
                        RetInfo[] retArr2 = { err };
                        return retArr2;
                    }


                    string safeFiles = "none";
                    string safeFolder = "empty";


                    if (type = "fileUpdate")
                    {
                        List<getAllPackagesResult> allPackages = await ptc.getAllPackagesAsync();
                        foreach (getAllPackagesResult pack in allPackages)
                        {
                            if (pack.packageName == Path.GetFileName(startPoint))
                            {
                                //if (pack.safeFiles != null)
                                //{
                                //    safeFiles = pack.safeFiles;
                                //}


                                //if (pack.safeFolders != null)
                                //{
                                //    safeFolder = pack.safeFolders;
                                //}
                            }
                        }
                    }










                    String mainFolder = Directory.GetCurrentDirectory() + "\\Uploadedpackages\\";
                    string startName = Path.GetFileName(startPoint);
                    String clientID = clientD.ToString();


                    String backupURL = endPoint + "backup";// + programName + ".zip";


                    var userD = System.Convert.FromBase64String(cred.userName);
                    string userN = System.Text.Encoding.UTF8.GetString(userD);
                    Guid guID = new Guid(clientID);


                    List<GetSpecificClientResult> locations = await ptc.GetSpecificClientAsync(guID);
                    string location = locations[0].APILocation;
                    string clientName = locations[0].clientName;
                   // List<getFilesByPackageResult> file = await ptc.getFilesByPackageAsync(startName);
                    List<getClientDataResult> clientData = await ptc.getClientDataAsync(guID);




                    string domain = crypt.EncryptString(clientData[0].domain);
                    string userName = crypt.EncryptString(clientData[0].username);
                    string pwd = crypt.EncryptString(clientData[0].pwd);


                    String zipFolder = mainFolder + "zipFolder\\";
                    Directory.CreateDirectory(zipFolder);


                    //Variables are now initialized


                    //This is just a bit of error checking
                    if (endPoint.contains("deploymentrest") && clientID == "E56464EF-B436-43AC-8DC3-425B3C1FA085")
                    {
                        RetInfo err = new RetInfo();
                        err.result = "error";
                        //err.data = new String[] { cOk.ToString(), progOk.ToString(), packOk.ToString() };
                        err.error = "Cannot Upload DeploymentRest to Webman";
                        err.otherData = "DeployMain Deploycheck";
                        RetInfo[] retArr3 = { err };
                        return retArr3;
                    }






                    //change the zipfile's name to the program name so that the receiver knows what program to update.
                    String zipped = zipFolder + startName + clientName + ".zip"; //packageName


                    if (System.IO.File.Exists(zipped))
                    {
                        System.IO.File.Delete(zipped);
                    }


                    //    System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" just before content creation \r\n");




                    List<string> prepDict = new List<string>();
                    if (type == "fileUpload")
                    {
                        prepDict.Add(type); // [0]
                        prepDict.Add(endPoint); // [1]
                        prepDict.Add(backupURL);// [2]
                        prepDict.Add(deploySecret);// [3]
                        prepDict.Add(appPool);// [4]
                        prepDict.Add(delCheck);// [5]
                        prepDict.Add(safeFiles);// [6]
                        prepDict.Add(safeFolder); // [7]
                    //    prepDict.Add(file[0].fileName); // [8] Intended for Deploying DeploymentRest
                        prepDict.Add(clientName);// [9]
                        prepDict.Add(domain);// [10]
                        prepDict.Add(userName);// [11]
                        prepDict.Add(pwd);// [12]
                    }
                    else if (type == "scriptUpdate")
                    {
                        prepDict.Add(type); // [0]
                        prepDict.Add(server);// [1]
                        prepDict.Add(database);// [2]
                        prepDict.Add(deploySecret);// [3]
                        prepDict.Add(clientName);// [4]
                        prepDict.Add(domain);// [5]
                        prepDict.Add(userName);// [6]
                        prepDict.Add(pwd);// [7]
                    }
                    else
                    {
                        RetInfo err = new RetInfo();
                        err.result = "error";
                        err.error = "Something Happened Trying to populate prepDict";
                        err.otherData = "DeployMain";
                        RetInfo[] retArr3 = { err };
                        return retArr3;
                    }


                    ZipFile.CreateFromDirectory(startPoint, zipped);
                    MultipartFormDataContent content = new MultipartFormDataContent();
                    ByteArrayContent fileContent = new ByteArrayContent(System.IO.File.ReadAllBytes(zipped));
                    content.Add(fileContent, "file", startName + clientName + ".zip");
                    foreach (string header in prepDict)
                    {
                        content.Add(new StringContent(header), header); //populates headers with all the things
                    }


                    HttpClient client = new HttpClient();
                    var response = await client.PostAsync(location + "DeployReceive", content);


                    resp = await response.Content.ReadAsStringAsync();


                    System.IO.File.Delete(zipped);


                    List<RetInfo> result = JsonConvert.DeserializeObject<List<RetInfo>>(resp);


                    Dictionary<String, dynamic> dict = new Dictionary<String, dynamic>();
                    dict.Add("program", result[0].data);
                    dict.Add("appPool", result[0].otherData);
                    dict.Add("package", startName);
                    dict.Add("client", locations[0].clientName);




                    if (result[0].result.ToLower() == "success")
                    {
                        dict.Add("result: " + endPoint, "success");
                        retdict.Add(dict);
                    }
                    else
                    {
                        dict.Add("result: " + endPoint, "error");
                        retdict.Add(dict);
                    }


                    System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" I finished Deploy Main. \r\n");




                    RetInfo ret = new RetInfo();
                    ret.result = "success";
                    ret.otherData = locations[0].clientName;
                    ret.data = dict;
                    ret.data = dict;


                    RetInfo[] retArr = { ret };
                    return retArr;
                }
                else
                {
                    System.IO.File.AppendAllText(@"c:\accel\richard.txt", $"Validation Error in Deploy Main. \r\n");


                    RetInfo retV = new RetInfo();
                    retV.result = "error";
                    retV.data = "User Validation Error";


                    RetInfo[] retArrV = { retV };
                    return retArrV;
                }
            }
            catch (Exception ex)
            {
                RetInfo err = new RetInfo();
                err.result = "error";
                err.error = ex.Message;
                err.otherData = "DeployBetter";


                RetInfo[] retArr = { err };
                return retArr;
            }
        }


        [Route("ReceiveBetter")]
        [HttpPost]
        public async Task<RetInfo[]> ReceiveBetter()
        {
            dynamic val2 = DateTime.Now.ToString();
            System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" {val2}.  I am in deploy Receive. \r\n");


            string Dir = Directory.GetCurrentDirectory();
            string programFolder = Dir + "\\ZipFiles\\";
            Directory.CreateDirectory(programFolder);


            IFormFileCollection files = Request.Form.Files;
            var header = Request.Form.Keys;
            var urls = header.OfType<string>().ToList();


            try
            {
                //check for verification
                if (urls[3] != deploySecret)
                {
                    RetInfo err = new RetInfo();
                    err.result = "error";
                    //ret.data = ;
                    RetInfo[] errRet = { err };
                    return errRet;
                }
                string type = urls[0].ToString();


                RetInfo[] dict = new RetInfo[0];
                foreach (var zipFile in files)
                {
                    string fullName = ContentDispositionHeaderValue.Parse(zipFile.ContentDisposition).FileName.Trim().ToString();
                    FileInfo fi = new FileInfo(fullName);




                    String dir = Directory.GetCurrentDirectory();
                    String mainDir = dir + "\\ReceivedFiles\\"; //destination subfolders?
                    string pathToSave = (mainDir + fi.Name.Trim('"'));




                    if (!Directory.Exists(mainDir))
                    {
                        Directory.CreateDirectory(mainDir);
                    }


                    ////////////////////////


                    if (urls[1].ToLower().Contains("deploymentrest"))//deploying the deployment engine is different
                    {
                        pathToSave = (urls[2] + zipFile.FileName.ToString() + "");
                    }
                    else
                    {
                        pathToSave = (programFolder + zipFile.FileName.ToString() + ""); //generate the save location of the file right here
                    }


                    long fileSize = zipFile.Length;


                    using (var stream = new FileStream(pathToSave, FileMode.Create)) //save the file
                    {
                        zipFile.CopyTo(stream);
                    }




                    if (urls[0] == "fileUpload")
                    {
                        string backupFolder = urls[2];
                        string mainFolder = urls[1];


                        String programName = zipFile.FileName;
                        //delete old backupfile
                        if (!Directory.Exists(backupFolder))
                        {
                            Directory.CreateDirectory(backupFolder);
                        }
                        else
                        {
                            System.IO.DirectoryInfo bi = new DirectoryInfo(backupFolder);
                            foreach (FileInfo file in bi.GetFiles())
                            {
                                file.Delete();
                            }
                        }
                        //stop appPool if it exists
                        if (urls[4].ToLower() != "notapi") //stops the App Pool if the program is an API
                        {
                            if (urls[1].ToLower().Contains("deploymentrest") != true)//This is so that the deploy service doesn't turn itself off.
                            {
                                var serverManager = new ServerManager();
                                var appPool = serverManager.ApplicationPools.FirstOrDefault(s => s.Name.Equals(urls[4]));
                                if (appPool == null)
                                {
                                    RetInfo err = new RetInfo();
                                    err.result = "error";
                                    err.data = "App Pool Not Found";
                                    err.extraData = "On .Stop";
                                    RetInfo[] reterr = { err };
                                    return reterr;
                                }
                                if (appPool.State != ObjectState.Stopped)
                                {
                                    appPool.Stop();
                                }
                            }
                        }
                        //save to the backupfolder
                        Thread.Sleep(10000);
                        //move the old files to the backup folder
                        String Temp = backupFolder + "\\" + programName + DateTime.Now.ToShortDateString + ".zip";


                        //If this is the first time the application has been deployed, this will create a new mainFolder for it to deploy to
                        if (!Directory.Exists(mainFolder))
                        {
                            Directory.CreateDirectory(mainFolder);


                            if (urls[3].ToLower() != "notapi") //This will connect the new folder to an App Pool
                            {
                                using (ServerManager SM = new ServerManager())
                                {
                                    string appPool = urls[3].ToString();
                                    string application = "/" + Path.GetFileName(mainFolder);
                                    if (SM.Sites[urls[8].ToString()] != null) //This should work to create programs on AIO
                                    {
                                        Site site = SM.Sites[urls[8].ToString()];
                                        site.Applications.Add(application, mainFolder);


                                        //                                    SM.CommitChanges();


                                        Application app = site.Applications[application];
                                        app.ApplicationPoolName = appPool;


                                        SM.CommitChanges();
                                    }
                                    else
                                    {
                                        foreach (Site site in SM.Sites) //This should deal with non-shared servers
                                        {
                                            foreach (Application app in site.Applications)
                                            {
                                                // Check if the application's physical path matches your folder's path.
                                                if (app.VirtualDirectories["/"].PhysicalPath == mainFolder)
                                                {
                                                    site.Applications.Add(application, mainFolder);
                                                    app.ApplicationPoolName = appPool;
                                                    SM.CommitChanges();
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                            }




                        }
                        else
                        {
                            ZipFile.CreateFromDirectory(mainFolder, Temp);
                        }




                        //If the update is an update to the deployment engine, it should hit this if statement
                        if (urls[1].ToLower().Contains("deploymentrest"))
                        { //This is a secondary path of file deployment
                            try
                            {
                                using (TaskService taskService = new TaskService())
                                {
                                    //In case the previous attempt errored for some reason
                                    if (taskService.GetTask("DeployManagementTask") != null)
                                    {
                                        taskService.RootFolder.DeleteTask("DeployManagementTask");
                                    }


                                    TaskDefinition task = taskService.NewTask();
                                    task.RegistrationInfo.Description = "Update Deploy Rest";


                                    TimeTrigger timeTrigger = new TimeTrigger();
                                    timeTrigger.StartBoundary = DateTime.Now.AddMinutes(2); // 2 minutes from now
                                    task.Triggers.Add(timeTrigger);
                                    task.Actions.Add(new ExecAction("powershell.exe", $"Stop-WebAppPool -Name \"{urls[4]}\"", null));//Stop App Pool
                                    task.Actions.Add(new ExecAction("powershell.exe", "Start-Sleep -Seconds 15", null)); //pause for 30 seconds
                                    //string deleteCommand = $"/c Get-ChildItem -Path \"{mainFolder}\" -Recurse | Where-Object {{ $_.FullName -notlike '*\\UploadedPackages\\*' -and $_.FullName -notlike '*\\UploadedScripts\\*' }} | Remove-Item -Force";
                                    //task.Actions.Add(new ExecAction("powershell.exe", deleteCommand, null)); //Should preserve the packages and scripts previously uploaded
                                    // task.Actions.Add(new ExecAction("cmd.exe", $"del /q /f  \"{mainFolder}\\*.* "));
                                    task.Actions.Add(new ExecAction("cmd.exe", $"/c rmdir /s /q \"{mainFolder}\"", null)); // delete mainFolder and its contents
                                    task.Actions.Add(new ExecAction("cmd.exe", $"/c mkdir \"{mainFolder}\"", null));
                                    task.Actions.Add(new ExecAction("powershell.exe", $"Expand-Archive -Path \"{pathToSave}\" -DestinationPath \"{mainFolder}\"", null)); //extract files to mainFolder
                                    task.Actions.Add(new ExecAction("powershell.exe", "Start-Sleep -Seconds 30", null)); //pause for 30 seconds
                                    task.Actions.Add(new ExecAction("powershell.exe", $"Expand-Archive -Path \"{mainFolder + "\\" + urls[8]}\" -DestinationPath \"{mainFolder}\"", null)); //Unzip the zip file urls[7]
                                    task.Actions.Add(new ExecAction("powershell.exe", "Start-Sleep -Seconds 30", null)); //pause for 30 seconds
                                    task.Actions.Add(new ExecAction("powershell.exe", $"Start-WebAppPool -Name \"{urls[4]}\"", null)); //Start App Pool
                                    task.Actions.Add(new ExecAction("cmd.exe", $"/c del /q \"{pathToSave}\\*.*\"", null)); //delete the zip filecd
                                    task.Principal.LogonType = TaskLogonType.Password;
                                    task.Principal.RunLevel = TaskRunLevel.Highest;


                                    System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" Trying to create Task\r\n");
                                    Crypt crypt = new Crypt();
                                    string domain = crypt.DecryptString(urls[10].ToString());
                                    string username = crypt.DecryptString(urls[11].ToString());
                                    string pwd = crypt.DecryptString(urls[12].ToString());


                                    taskService.RootFolder.RegisterTaskDefinition("DeployManagementTask", task, TaskCreation.Create, domain + "\\" + username, pwd, TaskLogonType.InteractiveTokenOrPassword);
                                };


                                dict[0].result = "task created";
                                dict[0].data = mainFolder;






                            }
                            catch (Exception tex)
                            {
                                System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" error {tex.Message}\r\n");
                            }
                        }
                        else
                        { //This is the Main path of File Deployment
                            if (urls[4].ToLower() == "true") //if delcheck is true
                            {
                                //delete old files from the main folder
                                System.IO.DirectoryInfo di = new DirectoryInfo(mainFolder);
                                var di2 = di.EnumerateFiles("*.*", SearchOption.AllDirectories).ToList();


                                string[] sFfiles = urls[5].Split(',');
                                string[] sFFolder = urls[6].Split(',');


                                //the do not list
                                List<string> doNotRemove = new List<string>();
                                foreach (string s in sFfiles)
                                {
                                    string name = Path.GetFileNameWithoutExtension(s);
                                    doNotRemove.Add(name);
                                }
                                foreach (string s in sFFolder)
                                {
                                    doNotRemove.Add(s);
                                }


                                foreach (FileInfo file in di2)
                                {
                                    if (!doNotRemove.Contains(Path.GetFileNameWithoutExtension(file.Name), StringComparer.OrdinalIgnoreCase) && !sFFolder.Any(safe => file.FullName.Contains(safe)))
                                    {
                                        file.Delete();


                                    }
                                    continue;
                                }
                            }


                            //move files from temp to main
                            ZipFile.ExtractToDirectory(pathToSave, mainFolder, true);


                            //If there are zip files in the directory, ideally because they were just uploaded, they will be unzipped with the following code
                            var filesUnzip = Directory.GetFiles(mainFolder);
                            foreach (var filePath in filesUnzip)
                            {
                                if (Path.GetExtension(filePath).ToLowerInvariant() == ".zip")
                                {
                                    // Unzip the file
                                    string extractPath = Path.GetDirectoryName(filePath);
                                    ZipFile.ExtractToDirectory(filePath, extractPath, true);


                                    // Delete the original zip file
                                    System.IO.File.Delete(filePath);
                                }
                            }
                        }
                        // start appPool if it exists
                        if (urls[4].ToLower() != "notapi") //stops the App Pool if the program is an API
                        {
                            if (urls[1].ToLower().Contains("deploymentrest") != true)//This is so that the deploy service doesn't turn itself off.
                            {
                                var serverManager = new ServerManager();
                                var appPool = serverManager.ApplicationPools.FirstOrDefault(s => s.Name.Equals(urls[4]));
                                if (appPool == null)
                                {
                                    RetInfo err = new RetInfo();
                                    err.result = "error";
                                    err.data = "App Pool Not Found";
                                    err.extraData = "On .Start";
                                    RetInfo[] reterr = { err };
                                    return reterr;
                                }
                                appPool.Start();
                            }
                        }


                        System.IO.File.Delete(pathToSave);




                        dict[0].result = "success";
                        dict[0].data = mainFolder;
                        dict[0].otherData = files[0].FileName;








                    }
                    else if (urls[0] == "scriptUpdate")
                    {
                        List<string> paths = new List<string>();
                        paths.Add(pathToSave); //[0]
                        paths.Add("redundent"); //[1] //unused code but I'll remove it at a later date. 8/13/2024 -R
                        paths.Add(urls[1].ToString()); //server [2]
                        paths.Add(urls[2].ToString()); //database [3]


                        dict = await ScriptExecute(paths, "no");
                        if (dict[0].error == null)
                        {
                            System.IO.File.Delete(pathToSave);
                        }




                    }
                    else
                    {
                        RetInfo err = new RetInfo();
                        err.result = "error";
                        err.error = "Something Happened Trying to check urls[0]";
                        err.otherData = "DeployReceive 1";
                        RetInfo[] retArr3 = { err };
                        return retArr3;


                    }


                } //foreach loop end


                return dict;


            }
            catch (Exception ex)
            {
                RetInfo err = new RetInfo();
                err.result = "error";
                err.error = ex.Message;
                err.otherData = "ReceiveBetter";


                RetInfo[] retArr = { err };
                return retArr;
            }


        }






        [Route("DeployMain")]
        [HttpPost]
        public async Task<RetInfo[]> DeployMain([FromBody] TokSendInfo info)
        {
            //String val = Newtonsoft.Json.JsonConvert.SerializeObject(info.data);
            dynamic val2 = DateTime.Now.ToString();
            System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" {val2}.  I am in Deploy Main. \r\n");
            //  System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" {info.data.ToString()}.  This is info. \r\n");




            try
            {


                clientUserInfo cred = new clientUserInfo();
                cred.userName = info.user;
                cred.sessionId = info.sessionId;
                cred.password = info.token;
                cred.groups = Request.HttpContext.Connection.RemoteIpAddress.ToString();




                if (checkCred(cred))
                {
                    //System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" past verification \r\n");




                    BillTestDBContext ct = new BillTestDBContext();
                    BillTestDBContextProcedures ptc = new BillTestDBContextProcedures(ct);


                    //Intialize directory variables
                    //dynamic test = null;
                    dynamic resp = null;
                    List<Dictionary<string, dynamic>> retdict = new List<Dictionary<string, dynamic>>();
                    dynamic prog;
                    dynamic clientD;
                    dynamic package;
                    bool cOk = info.data.TryGetValue("clientID", out clientD);
                    bool progOk = info.data.TryGetValue("program", out prog);
                    bool packOk = info.data.TryGetValue("package", out package);


                    if (cOk != true || progOk != true || packOk != true)
                    {
                        RetInfo err = new RetInfo();
                        err.result = "error";
                        err.data = new String[] { cOk.ToString(), progOk.ToString(), packOk.ToString() };
                        err.error = "Could not initalize a variable";
                        err.otherData = "DeployMainPreCheck";
                        RetInfo[] retArr2 = { err };
                        return retArr2;
                    }


                    String mainFolder = Directory.GetCurrentDirectory() + "\\Uploadedpackages\\";
                    String programName = prog.ToString();
                    String clientID = clientD.ToString();
                    String location;
                    string safeFiles = "none";
                    string safeFolder = "empty";


                    String packageName = package.ToString();
                    //String[] packageNames = package;


                    // foreach (String packageName in packageNames)
                    //{




                    String delCheck = info.data["delCheck"]?.ToString();
                    var userD = System.Convert.FromBase64String(cred.userName);
                    string userN = System.Text.Encoding.UTF8.GetString(userD);




                    String[] packageSplit = packageName.Split(" v");
                    String packageVersion = packageSplit.Last();


                    String packageFolder = mainFolder + packageName;


                    String zipFolder = mainFolder + "zipFolder\\";
                    Directory.CreateDirectory(zipFolder);


                    System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" Past variable creation. \r\n");




                    if (programName.ToLower() == "deploymentrest" && clientID == "E56464EF-B436-43AC-8DC3-425B3C1FA085")
                    {
                        RetInfo err = new RetInfo();
                        err.result = "error";
                        //err.data = new String[] { cOk.ToString(), progOk.ToString(), packOk.ToString() };
                        err.error = "Cannot Upload DeploymentRest to Webman";
                        err.otherData = "DeployMain Deploycheck";
                        RetInfo[] retArr3 = { err };
                        return retArr3;
                    }


                    List<getAllPackagesResult> allPackages = await ptc.getAllPackagesAsync();
                    foreach (getAllPackagesResult pack in allPackages)
                    {
                        if (pack.packageName == packageName)
                        {
                            //if (pack.safeFiles != null)
                            //{
                            //    safeFiles = pack.safeFiles;
                            //}


                            //if (pack.safeFolders != null)
                            //{
                            //    safeFolder = pack.safeFolders;
                            //}
                        }
                    }
                    if (safeFolder == "none")
                    {
                        safeFolder = "empty";
                    }


                 //   List<getFilesByPackageResult> file = await ptc.getFilesByPackageAsync(packageName);


                    //For each client that has been selected
                    //        foreach (String id in clientID) //This has been removed because the front-end will be sending over each clientID individually
                    //        {
                    //get client URL 
                    //Send the package and program name to the receiver 
                    //get program URL
                    //start by getting program by client?


                    Guid guID = new Guid(clientID);


                    //Get information about the client's programs
                    List<getProgramsByClientResult> programs = await ptc.getProgramsByClientAsync(guID);


                    //This connects DeployClients to Company_Endpoints using their respective HostNames. It is a temporary fix which will need to be changed for future versions.
                    //In future, I plan to add a new field to DeployClients which contains the GUID used by the client in the Company_Endpoints table. 
                    List<getClientDataResult> clientData = await ptc.getClientDataAsync(guID);




                    int progCount = 0;
                    //for each program returned
                    foreach (getProgramsByClientResult programsByClientResult in programs)
                    {
                        if (programsByClientResult.programName.ToLower() == programName.ToLower())
                        {


                            Crypt crypt = new Crypt();




                            //get information from sql
                            location = programsByClientResult.APILocation;
                            String mainURL = programsByClientResult.endpoint;
                            //       String backupURL = programsByClientResult.backupUrl;// + programName + ".zip";
                            //         String appPool = programsByClientResult.applicationPool;
                            string clientName = programsByClientResult.clientName;


                            string domain = crypt.EncryptString(clientData[0].domain);
                            string userName = crypt.EncryptString(clientData[0].username);
                            string pwd = crypt.EncryptString(clientData[0].pwd);


                            //change the zipfile's name to the program name so that the receiver knows what program to update.
                            String zipped = zipFolder + programName + clientName + ".zip"; //packageName


                            if (System.IO.File.Exists(zipped))
                            {
                                System.IO.File.Delete(zipped);
                            }


                            //    System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" just before content creation \r\n");


                            ZipFile.CreateFromDirectory(packageFolder, zipped);
                            MultipartFormDataContent content = new MultipartFormDataContent();
                            ByteArrayContent fileContent = new ByteArrayContent(System.IO.File.ReadAllBytes(zipped));
                            content.Add(fileContent, "file", programName + clientName + ".zip");
                            content.Add(new StringContent(mainURL), mainURL);//urls 0
                                                                             //      content.Add(new StringContent(backupURL), backupURL);//urls 1
                            content.Add(new StringContent(deploySecret), deploySecret);//urls 2
                                                                                       //       content.Add(new StringContent(appPool), appPool);//urls 3
                            content.Add(new StringContent(delCheck), delCheck);//urls 4


                            content.Add(new StringContent(safeFiles), safeFiles); //urls 5
                            content.Add(new StringContent(safeFolder), safeFolder); //urls 6


                       //     content.Add(new StringContent(file[0].fileName), file[0].fileName); //urls 7. Intended for Deploying DeploymentRest
                            content.Add(new StringContent(clientName), clientName); //urls 8. 


                            content.Add(new StringContent(domain), domain); // urls 9
                            content.Add(new StringContent(userName), userName); // urls 10
                            content.Add(new StringContent(pwd), pwd); // urls 11


                            HttpClient client = new HttpClient();
                            var response = await client.PostAsync(location + "DeployReceive", content);


                            resp = await response.Content.ReadAsStringAsync();


                            System.IO.File.Delete(zipped);


                            //register the package that has been uploaded to the specific program and client
                            int rest = await ptc.updateDepProgramPackagesAsync(guID, programsByClientResult.programID, packageName, userN);


                        }
                        else
                        {
                            progCount = progCount + 1;
                        }
                    }
                    if (progCount == programs.Count)
                    {
                        RetInfo retD = new RetInfo();
                        retD.result = "error";
                        retD.data = "No program found";
                        RetInfo[] retArrD = { retD };
                        return retArrD;
                    }
                    else
                    {






                        List<RetInfo> result = JsonConvert.DeserializeObject<List<RetInfo>>(resp);


                        Dictionary<String, dynamic> dict = new Dictionary<String, dynamic>();
                        dict.Add("program", result[0].data);
                        dict.Add("appPool", result[0].otherData);
                        dict.Add("package", package);
                        dict.Add("client", programs[0].clientName);




                        if (result[0].result.ToLower() == "success")
                        {
                            dict.Add("result: " + packageName, "success");
                            retdict.Add(dict);
                        }
                        else
                        {
                            dict.Add("result: " + packageName, "error");
                            retdict.Add(dict);
                        }


                        System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" I finished 1 Package In Deploy Main. \r\n");
                    }


                    System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" I finished Deploy Main. \r\n");




                    RetInfo ret = new RetInfo();
                    ret.result = "success";
                    ret.otherData = programs[0].clientName;
                    ret.data = retdict;


                    RetInfo[] retArr = { ret };
                    return retArr;


                }
                //RetInfo retet = new RetInfo();
                //retet.result = "error";
                //retet.data = "something went wrong";
                //retet.error = "\"something went wrong\";";
                //RetInfo[] retEmp = { retet };
                //return retEmp;




                // }
                else
                {
                    System.IO.File.AppendAllText(@"c:\accel\richard.txt", $"Validation Error in Deploy Main. \r\n");


                    RetInfo ret = new RetInfo();
                    ret.result = "error";
                    ret.data = "User Validation Error";


                    RetInfo[] retArr = { ret };
                    return retArr;
                }


            }
            catch (Exception ex)
            {


                System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" {ex.Message}.  I errored in Deploy Main. \r\n");


                RetInfo err = new RetInfo();
                err.result = "error";
                err.otherData = "DeployMain";
                err.error = ex.Message;
                return new List<RetInfo>() { err }.ToArray();
            }
        }








        //[Route("AsyncDeploy")] // 4/12/2024 Not currently working. My plan was to use Hangfire but I didn't get it to work before being directed to a different part. 
        //[HttpPost]
        //public async void AsyncDeploy()
        //{
        //    try
        //    {
        //        dynamic resp;
        //        if(asyncDict.Count == 0)
        //        {
        //            System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" No packages to Upload in Async Deploy. \r\n");
        //        }
        //        else
        //        {
        //            foreach (var ups in asyncDict)
        //            {
        //                var client_package = ups.Key;
        //                var location = ups.Value.location;
        //                MultipartFormDataContent content = ups.Value.content;


        //                HttpClient client = new HttpClient();
        //                var response = await client.PostAsync(location + "DeployReceive", content);
        //                //test = response;
        //                resp = await response.Content.ReadAsStringAsync();


        //                List<RetInfo> result = JsonConvert.DeserializeObject<List<RetInfo>>(resp);
        //                System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" {resp[0]}. I uploaded a package in Async Deploy. \r\n");
        //            }
        //        }


        //        //delete all from zipped files
        //        String mainFolder = Directory.GetCurrentDirectory() + "\\Uploadedpackages\\" + "zipFolder\\";
        //        System.IO.DirectoryInfo bi = new DirectoryInfo(mainFolder);
        //        foreach (FileInfo file in bi.GetFiles())
        //        {
        //            file.Delete();
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        RetInfo err = new RetInfo();
        //        err.result = "error";
        //        err.otherData = "DeployAsync";
        //        err.error = ex.Message;


        //        System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" {err}. I errored in Async Deploy. \r\n");


        //        //return new List<RetInfo>() { err }.ToArray();
        //    }
        //}






        [Route("DeployReceive")]
        [HttpPost]
        public async Task<RetInfo[]> DeployReceive()
        {


            dynamic val2 = DateTime.Now.ToString();
            System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" {val2}.  I am in deploy Receive. \r\n");


            string Dir = Directory.GetCurrentDirectory();
            string programFolder = Dir + "\\ZipFiles\\";
            Directory.CreateDirectory(programFolder);


            IFormFileCollection files = Request.Form.Files;
            var header = Request.Form.Keys;
            var urls = header.OfType<string>().ToList();


            try
            {
                //check for verification
                if (urls[2] != deploySecret)
                {
                    RetInfo err = new RetInfo();
                    err.result = "error";
                    //ret.data = ;
                    RetInfo[] errRet = { err };
                    return errRet;
                }
                if (urls[3].ToLower() != "notapi") //stops the App Pool if the program is an API
                {
                    if (Path.GetFileName(urls[0]).TrimEnd('\\').ToLower() != "deploymentrest")//This is so that the deploy service doesn't turn itself off.
                    {
                        var serverManager = new ServerManager();
                        var appPool = serverManager.ApplicationPools.FirstOrDefault(s => s.Name.Equals(urls[3]));
                        if (appPool == null)
                        {
                            RetInfo err = new RetInfo();
                            err.result = "error";
                            err.data = "App Pool Not Found";
                            err.extraData = "On .Stop";
                            RetInfo[] reterr = { err };
                            return reterr;
                        }
                        if (appPool.State != ObjectState.Stopped)
                        {
                            appPool.Stop();
                        }
                    }
                }


                //get the zip file
                foreach (var zipFile in files)
                {


                    String backupFolder = urls[1];
                    String mainFolder = urls[0];


                    //foreach (dynamic url in urls)
                    //{
                    //    System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" {url} \r\n");
                    //}




                    string fullName = ContentDispositionHeaderValue.Parse(zipFile.ContentDisposition).FileName.Trim().ToString();
                    FileInfo fi = new FileInfo(fullName);
                    //create the zip file on the server
                    dynamic pathToSave;
                    if (Path.GetFileName(urls[0]).TrimEnd('\\').ToLower() == "deploymentrest")//deploying the deployment engine is different
                    {
                        pathToSave = (backupFolder + zipFile.FileName.ToString() + "");
                    }
                    else
                    {
                        pathToSave = (programFolder + zipFile.FileName.ToString() + ""); //generate the save location of the file right here
                    }


                    long fileSize = zipFile.Length;


                    using (var stream = new FileStream(pathToSave, FileMode.Create))
                    {
                        zipFile.CopyTo(stream);
                    }


                    //Thread.Sleep(10000);
                    //delete/move current files into a backup location
                    String programName = zipFile.FileName;




                    //delete old backupfile
                    if (!Directory.Exists(backupFolder))
                    {
                        Directory.CreateDirectory(backupFolder);
                    }
                    else
                    {
                        System.IO.DirectoryInfo bi = new DirectoryInfo(backupFolder);
                        foreach (FileInfo file in bi.GetFiles())
                        {
                            file.Delete();
                        }
                    }


                    Thread.Sleep(10000);


                    //move the old files to the backup folder
                    String Temp = backupFolder + "\\" + programName + DateTime.Now.ToShortDateString + ".zip";


                    //If this is the first time the application has been deployed, this will create a new mainFolder for it to deploy to
                    if (!Directory.Exists(mainFolder))
                    {
                        Directory.CreateDirectory(mainFolder);


                        if (urls[3].ToLower() != "notapi") //This will connect the new folder to an App Pool
                        {
                            using (ServerManager SM = new ServerManager())
                            {
                                string appPool = urls[3].ToString();
                                string application = "/" + Path.GetFileName(mainFolder);
                                if (SM.Sites[urls[8].ToString()] != null) //This should work to create programs on AIO
                                {
                                    Site site = SM.Sites[urls[8].ToString()];
                                    site.Applications.Add(application, mainFolder);


                                    //                                    SM.CommitChanges();


                                    Application app = site.Applications[application];
                                    app.ApplicationPoolName = appPool;


                                    SM.CommitChanges();
                                }
                                else
                                {
                                    foreach (Site site in SM.Sites) //This should deal with non-shared servers
                                    {
                                        foreach (Application app in site.Applications)
                                        {
                                            // Check if the application's physical path matches your folder's path.
                                            if (app.VirtualDirectories["/"].PhysicalPath == mainFolder)
                                            {
                                                site.Applications.Add(application, mainFolder);
                                                app.ApplicationPoolName = appPool;
                                                SM.CommitChanges();
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                        }




                    }
                    else
                    {
                        ZipFile.CreateFromDirectory(mainFolder, Temp);
                    }


                    //If the update is an update to the deployment engine, it should hit this if statement
                    if (Path.GetFileName(urls[0]).TrimEnd('\\').ToLower() == "deploymentrest")
                    {
                        try
                        {
                            using (TaskService taskService = new TaskService())
                            {


                                if (taskService.GetTask("DeployManagementTask") != null)
                                {
                                    taskService.RootFolder.DeleteTask("DeployManagementTask");
                                }


                                TaskDefinition task = taskService.NewTask();
                                task.RegistrationInfo.Description = "Update Deploy Rest";


                                TimeTrigger timeTrigger = new TimeTrigger();
                                timeTrigger.StartBoundary = DateTime.Now.AddMinutes(2); // 2 minutes from now
                                task.Triggers.Add(timeTrigger);


                                task.Actions.Add(new ExecAction("powershell.exe", $"Stop-WebAppPool -Name \"{urls[3]}\"", null));//Stop App Pool


                                task.Actions.Add(new ExecAction("powershell.exe", "Start-Sleep -Seconds 15", null)); //pause for 30 seconds


                                //string deleteCommand = $"/c Get-ChildItem -Path \"{mainFolder}\" -Recurse | Where-Object {{ $_.FullName -notlike '*\\UploadedPackages\\*' -and $_.FullName -notlike '*\\UploadedScripts\\*' }} | Remove-Item -Force";
                                //task.Actions.Add(new ExecAction("powershell.exe", deleteCommand, null)); //Should preserve the packages and scripts previously uploaded


                                // task.Actions.Add(new ExecAction("cmd.exe", $"del /q /f  \"{mainFolder}\\*.* "));
                                task.Actions.Add(new ExecAction("cmd.exe", $"/c rmdir /s /q \"{mainFolder}\"", null)); // delete mainFolder and its contents




                                task.Actions.Add(new ExecAction("cmd.exe", $"/c mkdir \"{mainFolder}\"", null));
                                task.Actions.Add(new ExecAction("powershell.exe", $"Expand-Archive -Path \"{pathToSave}\" -DestinationPath \"{mainFolder}\"", null)); //extract files to mainFolder


                                task.Actions.Add(new ExecAction("powershell.exe", "Start-Sleep -Seconds 30", null)); //pause for 30 seconds


                                task.Actions.Add(new ExecAction("powershell.exe", $"Expand-Archive -Path \"{mainFolder + "\\" + urls[7]}\" -DestinationPath \"{mainFolder}\"", null)); //Unzip the zip file urls[7]


                                task.Actions.Add(new ExecAction("powershell.exe", "Start-Sleep -Seconds 30", null)); //pause for 30 seconds




                                task.Actions.Add(new ExecAction("powershell.exe", $"Start-WebAppPool -Name \"{urls[3]}\"", null)); //Start App Pool


                                task.Actions.Add(new ExecAction("cmd.exe", $"/c del /q \"{pathToSave}\\*.*\"", null)); //delete the zip filecd  


                                task.Principal.LogonType = TaskLogonType.Password;
                                task.Principal.RunLevel = TaskRunLevel.Highest;




                                System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" Trying to create Task\r\n");
                                Crypt crypt = new Crypt();
                                string domain = crypt.DecryptString(urls[9].ToString());
                                string username = crypt.DecryptString(urls[10].ToString());
                                string pwd = crypt.DecryptString(urls[11].ToString());


                                taskService.RootFolder.RegisterTaskDefinition("DeployManagementTask", task, TaskCreation.Create, domain + "\\" + username, pwd, TaskLogonType.InteractiveTokenOrPassword);
                            };
                        }
                        catch (Exception tex)
                        {
                            System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" error {tex.Message}\r\n");
                        }
                    }
                    else
                    {




                        if (urls[4].ToLower() == "true") //if delcheck is true
                        {
                            //delete old files from the main folder
                            System.IO.DirectoryInfo di = new DirectoryInfo(mainFolder);
                            var di2 = di.EnumerateFiles("*.*", SearchOption.AllDirectories).ToList();


                            string[] sFfiles = urls[5].Split(',');
                            string[] sFFolder = urls[6].Split(',');


                            //the do not list
                            List<string> doNotRemove = new List<string>();
                            foreach (string s in sFfiles)
                            {
                                string name = Path.GetFileNameWithoutExtension(s);
                                doNotRemove.Add(name);
                            }
                            foreach (string s in sFFolder)
                            {
                                doNotRemove.Add(s);
                            }


                            foreach (FileInfo file in di2)
                            {
                                if (!doNotRemove.Contains(Path.GetFileNameWithoutExtension(file.Name), StringComparer.OrdinalIgnoreCase) && !sFFolder.Any(safe => file.FullName.Contains(safe)))
                                {
                                    file.Delete();


                                }
                                continue;
                            }
                        }




                        //unzip new files into the main folder
                        //save zipfile to loaction


                        //unzip zipfile into the main folder
                        ZipFile.ExtractToDirectory(pathToSave, mainFolder, true);  //move files from temp to main




                        var filesUnzip = Directory.GetFiles(mainFolder); //this said pathToSave, i think that was the error upload and test 3/5/2024


                        foreach (var filePath in filesUnzip)
                        {
                            if (Path.GetExtension(filePath).ToLowerInvariant() == ".zip")
                            {
                                // Unzip the file
                                string extractPath = Path.GetDirectoryName(filePath);
                                ZipFile.ExtractToDirectory(filePath, extractPath, true);


                                // Delete the original zip file
                                System.IO.File.Delete(filePath);
                            }
                        }


                        if (urls[3].ToLower() != "notapi")  //restarts App Pool
                        {
                            if (Path.GetDirectoryName(urls[0]).TrimEnd('\\') == "deploymentRest")
                            {
                                //This is so that the deploy service doesn't turn itself off.
                            }
                            else
                            {
                                var serverManager = new ServerManager();
                                var appPool = serverManager.ApplicationPools.FirstOrDefault(s => s.Name.Equals(urls[3]));//  .Name.Equals("SBNoaReader"));
                                if (appPool == null)
                                {
                                    RetInfo err = new RetInfo();
                                    err.result = "error";
                                    err.data = "App Pool Not Found";
                                    err.extraData = "On .Start";
                                    RetInfo[] reterr = { err };
                                    return reterr;
                                }
                                appPool.Start();
                            }
                        }


                        //delete zipfile
                        System.IO.File.Delete(pathToSave);
                    }


                }
                System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" I finished in deploy receive. \r\n");




                RetInfo ret = new RetInfo();
                ret.result = "success";
                ret.data = urls[0]; //Which program
                ret.otherData = urls[3]; //Which Application Pool
                RetInfo[] retArr = { ret };
                return retArr;
            }
            catch (Exception ex)
            {
                String backupFolder = urls[1];
                String mainFolder = urls[0];
                String appPool = urls[3];
                System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" I errored in deploy receive. \r\n");
                System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" {ex.Message}. \r\n");


                SendInfo send = new SendInfo();
                send.data.Add("main", mainFolder);
                send.data.Add("backup", backupFolder);
                send.data.Add("appPool", appPool);


                var resp = await ProgramRevert(send);






                RetInfo err = new RetInfo();
                err.result = "error";
                err.otherData = "DeployReceive";
                err.error = ex.Message;
                return new List<RetInfo>() { err }.ToArray();
            }


        }




        [Route("GetAppPools")]
        [HttpPost]
        public async Task<RetInfo[]> GetAppPools([FromBody] TokSendInfo info)
        {


            try
            {
                clientUserInfo cred = new clientUserInfo();
                cred.userName = info.user;
                cred.sessionId = info.sessionId;
                cred.password = info.token;
                cred.groups = Request.HttpContext.Connection.RemoteIpAddress.ToString();




                if (checkCred(cred))
                {


                    BillTestDBContext ct = new BillTestDBContext();
                    BillTestDBContextProcedures ptc = new BillTestDBContextProcedures(ct);


                    String clientID = info.data["clientID"].ToString();


                    List<GetSpecificClientResult> clients = await ptc.GetSpecificClientAsync(new Guid(clientID));


                    if (clients.Count == 0)
                    {
                        RetInfo ret2 = new RetInfo();
                        ret2.result = "error";
                        ret2.error = "no client found in GetAppPools";
                        RetInfo[] retArr2 = { ret2 };
                        return retArr2;
                    }


                    String location = clients[0].APILocation;


                    MultipartFormDataContent content = new MultipartFormDataContent();
                    content.Add(new StringContent(deploySecret), deploySecret);


                    HttpClient client = new HttpClient();
                    var response = await client.PostAsync(location + "ClientAppPools", content);
                    //test = response;
                    dynamic resp = await response.Content.ReadAsStringAsync();


                    List<string> result = JsonConvert.DeserializeObject<List<string>>(resp);


                    List<appPoolData> appStati = new List<appPoolData>();


                    foreach (string pool in result)
                    {
                        string[] t = pool.Split(":");


                        appPoolData appStatus = new appPoolData();
                        appStatus.poolName = t[0].Trim();
                        appStatus.Status = t[1].Trim();


                        appStati.Add(appStatus);
                    }


                    RetInfo ret = new RetInfo();
                    ret.result = "success";
                    ret.data = new { clientID = clientID, appPoolList = appStati };
                    ret.otherData = appStati;
                    
                    //ret.data = result;
                    RetInfo[] retArr = { ret };
                    return retArr;


                }
                else
                {
                    RetInfo ret = new RetInfo();
                    ret.result = "error";
                    ret.data = "User Validation Error";
                    RetInfo[] retArr = { ret };
                    return retArr;
                }


            }
            catch (Exception ex)
            {
                RetInfo err = new RetInfo();
                err.result = "error";
                err.otherData = "GetAppPools";
                err.error = ex.Message;
                return new List<RetInfo>() { err }.ToArray();
            }
        }


        [Route("ClientAppPools")]
        [HttpPost]
        public List<string> ClientAppPools()
        {
            var header = Request.Form.Keys;
            var urls = header.OfType<string>().ToList();


            if (urls[0] == deploySecret)
            {
                try
                {
                    List<string> dict = new List<string>();


                    ServerManager SM = new ServerManager();


                    foreach (var appPool in SM.ApplicationPools)
                    {


                        string hello = appPool.Name + " : " + appPool.State;


                        dict.Add(hello);


                        //dict.Add(appPool.Name);
                    }


                    return dict;
                }
                catch (Exception ex)
                {
                    RetInfo err = new RetInfo();
                    err.result = "error";
                    err.otherData = "ClientAppPools";
                    err.error = ex.Message;
                    return new List<string> { err.error };
                    // return err;
                }
            }
            else
            {
                return new List<string> { string.Empty };
            }


        }


        //Show programs that are associated with a specific app pool
        [Route("GetAppPrograms")]
        [HttpPost]
        public async Task<RetInfo[]> GetAppPrograms([FromBody] GBSendInfo info)
        {
            BillTestDBContext ct = new BillTestDBContext();
            BillTestDBContextProcedures ptc = new BillTestDBContextProcedures(ct);
            try
            {
                clientUserInfo cred = new clientUserInfo();
                cred.userName = info.user;
                cred.sessionId = info.sessionId;
                cred.groups = Request.HttpContext.Connection.RemoteIpAddress.ToString();


                if (verify(cred))
                {
                    string clientID = info.data["clientID"].ToString();
                    string appPool = info.data["appPool"].ToString();


                    List<GetSpecificClientResult> clients = await ptc.GetSpecificClientAsync(new Guid(clientID));


                    if (clients.Count == 0)
                    {
                        RetInfo ret2 = new RetInfo();
                        ret2.result = "error";
                        ret2.error = "no client found in GetAppPrograms";
                        RetInfo[] retArr2 = { ret2 };
                        return retArr2;
                    }


                    String location = clients[0].APILocation;


                    MultipartFormDataContent content = new MultipartFormDataContent();
                    content.Add(new StringContent(deploySecret), deploySecret); //[0]
                    content.Add(new StringContent(appPool), appPool); //[1]


                    HttpClient client = new HttpClient();
                    var response = await client.PostAsync(location + "AppPoolPrograms", content);


                    dynamic resp = await response.Content.ReadAsStringAsync();


                    List<string> data = JsonConvert.DeserializeObject<List<string>>(resp);


                    //List<RetInfo> result = JsonConvert.DeserializeObject<List<RetInfo>>(resp);


                    RetInfo ret = new RetInfo();
                    ret.data = data;
                    ret.result = "success";
                    RetInfo[] retFul = { ret };
                    return retFul;


                }
                else
                {
                    RetInfo ret = new RetInfo();
                    ret.result = "error";
                    ret.data = "User Validation Error";
                    RetInfo[] retArr = { ret };
                    return retArr;
                }


            }
            catch (Exception ex)
            {
                RetInfo err = new RetInfo();
                err.result = "error";
                err.otherData = "GetAppPrograms";
                err.error = ex.Message;
                return new List<RetInfo>() { err }.ToArray();
            }


        }


        [Route("AppPoolPrograms")]
        [HttpPost]
        public List<string> AppPoolPrograms()
        {
            var header = Request.Form.Keys;
            var urls = header.OfType<string>().ToList();
            try
            {
                if (urls[0] == deploySecret)
                {
                    string appPool = urls[1].ToString();


                    List<string> dict = new List<string>();
                    ServerManager SM = new ServerManager();


                    Site site = SM.Sites["Default Web Site"]; //this may need to be passed in.


                    foreach (Application app in site.Applications) //collect all applications from the site
                    {
                        if (app.ApplicationPoolName == appPool) //checks whether application is hosted on the selected app pool
                        {
                            dict.Add(app.Path.Trim('/'));
                        }
                        else
                        {
                            continue;
                        }
                    }


                    return dict;


                }
                else
                {
                    return new List<string> { string.Empty };
                }


            }
            catch (Exception ex)
            {
                RetInfo err = new RetInfo();
                err.result = "error";
                err.otherData = "AppPoolPrograms";
                err.error = ex.Message;
                return new List<string> { err.error };
            }
        }






        [Route("RevertDeployment")]
        [HttpPost]
        public async Task<RetInfo[]> RevertDeployment([FromBody] TokSendInfo info)
        {
            try
            {
                clientUserInfo cred = new clientUserInfo();
                cred.userName = info.user;
                cred.sessionId = info.sessionId;
                cred.password = info.token;
                cred.groups = Request.HttpContext.Connection.RemoteIpAddress.ToString();




                if (checkCred(cred))
                {
                    BillTestDBContext ct = new BillTestDBContext();
                    BillTestDBContextProcedures ptc = new BillTestDBContextProcedures(ct);


                    dynamic resp = "empty";


                    string clientD = info.data["clientID"].ToString();
                    Guid clientID = new Guid(clientD);
                    string programD = info.data["programID"].ToString();
                    Guid programID = new Guid(programD);


                    List<getProgramsByClientResult> Programs = await ptc.getProgramsByClientAsync(clientID);


                    foreach (getProgramsByClientResult P in Programs)
                    {
                        if (P.programID == programID)
                        {
                            string location = P.APILocation;
                            //   string appPool = P.applicationPool;
                            string mainURL = P.endpoint;
                            //   string backupURL = P.backupUrl;


                            MultipartFormDataContent content = new MultipartFormDataContent();
                            content.Add(new StringContent(mainURL), mainURL);//urls 0
                                                                             //     content.Add(new StringContent(backupURL), backupURL);//urls 1
                            content.Add(new StringContent(deploySecret), deploySecret);//urls 2
                                                                                       //     content.Add(new StringContent(appPool), appPool);//urls 3


                            HttpClient client = new HttpClient();
                            var response = await client.PostAsync(location + "", content);
                            //test = response;
                            resp = await response.Content.ReadAsStringAsync();


                        }
                    }


                    if (resp != "empty")
                    {




                        List<RetInfo> result = JsonConvert.DeserializeObject<List<RetInfo>>(resp);


                        RetInfo[] ret = result.ToArray();


                        return ret;
                    }
                    else
                    {
                        RetInfo ret = new RetInfo();
                        ret.result = "error";
                        ret.data = "No Program Found";
                        ret.error = "No Program Found";
                        RetInfo[] retArr = { ret };
                        return retArr;
                    }




                }
                else
                {
                    RetInfo ret = new RetInfo();
                    ret.result = "error";
                    ret.data = "User Validation Error";
                    RetInfo[] retArr = { ret };
                    return retArr;
                }
            }
            catch (Exception ex)
            {
                RetInfo err = new RetInfo();
                err.result = "error";
                err.otherData = "RevertDeployment";
                err.error = ex.Message;
                return new List<RetInfo>() { err }.ToArray();
            }
        }




        [Route("RevertReceive")]
        [HttpPost]
        public async Task<RetInfo[]> RevertReceive()
        {
            try
            {
                var header = Request.Form.Keys;
                var urls = header.OfType<string>().ToList();


                //check for verification
                if (urls[2] != deploySecret)
                {
                    RetInfo err = new RetInfo();
                    err.result = "error";
                    //ret.data = ;
                    RetInfo[] errRet = { err };
                    return errRet;
                }
                else
                {
                    SendInfo info = new SendInfo();
                    info.data.Add("main", urls[0]);
                    info.data.Add("backup", urls[1]);
                    info.data.Add("appPool", urls[3]);


                    RetInfo[] ret = await ProgramRevert(info);


                    return ret;
                }




            }
            catch (Exception ex)
            {
                RetInfo err = new RetInfo();
                err.result = "error";
                err.error = ex.Message;
                RetInfo[] errRet = { err };
                return errRet;
            }
        }




        [Route("ProgramRevert")]
        [HttpPost]
        public async Task<RetInfo[]> ProgramRevert([FromBody] SendInfo info)
        {


            System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" We entered ProgramRevert. \r\n");


            try
            {


                String mainUrl = info.data["main"].ToString();
                String backupUrl = info.data["backup"].ToString();
                String appPools = info.data["appPool"].ToString();




                if (appPools.ToLower() != "notapi") //stops the App Pool if the program is an API
                {
                    var serverManager = new ServerManager();
                    var appPool = serverManager.ApplicationPools.FirstOrDefault(s => s.Name.Equals(appPools));
                    if (appPool.State != ObjectState.Stopped)
                    {
                        appPool.Stop();
                    }
                    else if (appPool == null)
                    {
                        RetInfo err = new RetInfo();
                        err.result = "error";
                        err.data = "App Pool Not Found";
                        err.extraData = "programRevert";
                        RetInfo[] reterr = { err };
                        return reterr;
                    }


                }


                //delete old files from the main folder
                System.IO.DirectoryInfo di = new DirectoryInfo(mainUrl);
                foreach (FileInfo file in di.GetFiles())
                {
                    file.Delete();
                }
                foreach (DirectoryInfo dir in di.GetDirectories())
                {
                    dir.Delete(true);
                }


                //Extract Backup files into the main directory
                ZipFile.ExtractToDirectory(backupUrl, mainUrl);


                if (appPools.ToLower() != "notapi") //stops the App Pool if the program is an API
                {
                    var serverManager = new ServerManager();
                    var appPool = serverManager.ApplicationPools.FirstOrDefault(s => s.Name.Equals(appPools));
                    if (appPool.State == ObjectState.Stopped)
                    {
                        appPool.Start();
                    }
                    else if (appPool == null)
                    {
                        RetInfo err = new RetInfo();
                        err.result = "error";
                        err.data = "App Pool Not Found";
                        err.extraData = "programRevert pt 2";
                        RetInfo[] reterr = { err };
                        return reterr;
                    }


                }


                RetInfo ret = new RetInfo();
                ret.result = "success";
                ret.data = "No Errors Tripped";
                RetInfo[] retArr = { ret };
                return retArr;
            }
            catch (Exception ex)
            {


                System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" I errored in program revert.  \r\n");


                RetInfo err = new RetInfo();
                err.result = "error";
                err.otherData = "ProgramRevert";
                err.error = ex.Message;
                return new List<RetInfo>() { err }.ToArray();
            }
        }








        [Route("ToggleAppPool")]
        [HttpPost]
        public async Task<RetInfo[]> ToggleAppPool([FromBody] TokSendInfo info)
        {
            BillTestDBContext ct = new BillTestDBContext();
            BillTestDBContextProcedures ptc = new BillTestDBContextProcedures(ct);
            try
            {
                clientUserInfo cred = new clientUserInfo();
                cred.userName = info.user;
                cred.sessionId = info.sessionId;
                cred.password = info.token;
                cred.groups = Request.HttpContext.Connection.RemoteIpAddress.ToString();


                if (checkCred(cred))
                {
                    string clientID = info.data["clientID"].ToString();
                    string appPool = info.data["appPool"].ToString();
                    string onOff = info.data["onOff"].ToString();


                    List<GetSpecificClientResult> clients = await ptc.GetSpecificClientAsync(new Guid(clientID));


                    if (clients.Count == 0)
                    {
                        RetInfo ret2 = new RetInfo();
                        ret2.result = "error";
                        ret2.error = "no client found";
                        RetInfo[] retArr2 = { ret2 };
                        return retArr2;
                    }


                    String location = clients[0].APILocation;
                    MultipartFormDataContent content = new MultipartFormDataContent();
                    content.Add(new StringContent(deploySecret), deploySecret);
                    content.Add(new StringContent(appPool), appPool);
                    content.Add(new StringContent(onOff), onOff);




                    HttpClient client = new HttpClient();
                    var response = await client.PostAsync(location + "ToggleReceive", content);
                    dynamic resp = await response.Content.ReadAsStringAsync();
                    //List<string> result = JsonConvert.DeserializeObject<List<string>>(resp);






                    RetInfo ret = new RetInfo();
                    if (resp == "something failed")
                    {
                        ret.result = "error";
                    }
                    else
                    {
                        ret.result = "success";
                    }
                    ret.data = resp;
                    RetInfo[] retArr = { ret };
                    return retArr;


                }
                else
                {
                    RetInfo ret = new RetInfo();
                    ret.result = "error";
                    ret.data = "User Validation Error";
                    RetInfo[] retArr = { ret };
                    return retArr;
                }
            }
            catch (Exception ex)
            {
                RetInfo err = new RetInfo();
                err.result = "error";
                err.extraData = ex.StackTrace;
                err.error = ex.Message;
                err.otherData = "toggleAppPool";
                RetInfo[] retArr = { err };
                return retArr;
            }
        }


        [Route("ToggleReceive")]
        [HttpPost]
        public string ToggleReceive()
        {
            //System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" In Toggle Receive.  \r\n");
            try
            {
                var header = Request.Form.Keys;
                var urls = header.OfType<string>().ToList();




                if (urls[0] != deploySecret)
                {
                    RetInfo err = new RetInfo();
                    err.result = "error";
                    RetInfo[] errRet = { err };
                    return err.result;
                }


                var serverManager = new ServerManager();
                var appPool = serverManager.ApplicationPools.FirstOrDefault(s => s.Name.Equals(urls[1]));
                if (appPool == null)
                {
                    RetInfo err = new RetInfo();
                    err.result = "error";
                    err.data = "App Pool Not Found";
                    err.extraData = "On .Stop";
                    RetInfo[] reterr = { err };
                    return err.data;
                }




                if (appPool.State == ObjectState.Stopped && urls[2].ToLower() == "on") //if the application pool is off
                {
                    appPool.Start();
                    return "started";
                }
                else if (appPool.State == ObjectState.Started && urls[2].ToLower() == "off") //if thye application pool is on
                {
                    appPool.Stop();
                    return "stopped";
                }
                else
                {
                    return "something failed";
                }




            }
            catch (Exception ex)
            {
                RetInfo err = new RetInfo();
                err.result = "error";
                err.extraData = ex.StackTrace;
                err.error = ex.Message;
                err.otherData = "toggleAppPool";
                RetInfo[] retArr = { err };
                return ex.Message;
            }
        }










        //[Route("GetServers")]
        //[HttpPost]
        //public async Task<RetInfo[]> GetServers([FromBody] TokSendInfo info)
        //{
        //    BillTestDBContext ct = new BillTestDBContext();
        //    BillTestDBContextProcedures ptc = new BillTestDBContextProcedures(ct);
        //    try
        //    {
        //        clientUserInfo cred = new clientUserInfo();
        //        cred.userName = info.user;
        //        cred.sessionId = info.sessionId;
        //        cred.password = info.token;
        //        cred.groups = Request.HttpContext.Connection.RemoteIpAddress.ToString();


        //        if (checkCred(cred))
        //        {
        //            String clientID = info.data["clientID"].ToString();


        //            List<GetSpecificClientResult> clients = await ptc.GetSpecificClientAsync(new Guid(clientID));


        //            System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" After get client.  \r\n");


        //            if (clients.Count == 0)
        //            {
        //                RetInfo ret2 = new RetInfo();
        //                ret2.result = "error";
        //                ret2.error = "no client found in GetServers";
        //                RetInfo[] retArr2 = { ret2 };
        //                return retArr2;
        //            }


        //            String location = clients[0].APILocation;


        //            MultipartFormDataContent content = new MultipartFormDataContent();
        //            content.Add(new StringContent(deploySecret), deploySecret);




        //            HttpClient client = new HttpClient();
        //            var response = await client.PostAsync(location + "ClientServers", content);




        //            //test = response;
        //            dynamic resp = await response.Content.ReadAsStringAsync();


        //            System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" {resp}.  \r\n");


        //            List<string> result = JsonConvert.DeserializeObject<List<string>>(resp ?? ""); //erroring here




        //            RetInfo ret = new RetInfo();
        //            ret.result = "success";
        //            ret.data = result;
        //            RetInfo[] retArr = { ret };
        //            return retArr;
        //        }
        //        else
        //        {
        //            RetInfo ret = new RetInfo();
        //            ret.result = "error";
        //            ret.data = "User Validation Error";
        //            RetInfo[] retArr = { ret };
        //            return retArr;
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        System.IO.File.AppendAllText(@"c:\accel\richard.txt", $" {ex.Message}.  \r\n");


        //        RetInfo err = new RetInfo();
        //        err.result = "error";
        //        err.extraData = ex.StackTrace;
        //        err.error = ex.Message;
        //        err.otherData = "GetServers";
        //        RetInfo[] retArr = { err };
        //        return retArr;
        //    }
        //}


        //[Route("ClientServers")]
        //[HttpPost]
        //public List<string> clientServers()
        //{


        //    var header = Request.Form.Keys;
        //    var urls = header.OfType<string>().ToList();


        //    if (urls[0] == deploySecret)
        //    {
        //        try
        //        {
        //            DataTable servers = Microsoft.Data.Sql.SqlDataSourceEnumerator.Instance.GetDataSources();


        //            List<String> dict2 = new List<String>();


        //            foreach (DataRow s in servers.Rows)
        //            {
        //                string name = s["ServerName"].ToString().Trim('{').Trim('}').Trim('.').Replace("\\r\\n", "");
        //                string inName = s["InstanceName"].ToString().Trim('{').Trim('}').Trim('.').Replace("\\r\\n", "");
        //                string serverIn;
        //                if (!String.IsNullOrEmpty(inName))
        //                {
        //                    serverIn = name + @"\" + inName;
        //                }
        //                else
        //                {
        //                    serverIn = name;
        //                }
        //                dict2.Add(serverIn);
        //            }
        //            return dict2;


        //        }
        //        catch (Exception ex)
        //        {
        //            List<string> errstring = new List<string>();
        //            errstring.Add(ex.Message);
        //            return errstring;
        //        }
        //    }
        //    else
        //    {
        //        List<string> errstring = new List<string>();
        //        return errstring;
        //    }
        //}




        //[Route("GetDatabases")]
        //[HttpPost]
        //public async Task<RetInfo[]> GetDatabases([FromBody] TokSendInfo info)
        //{
        //    BillTestDBContext ct = new BillTestDBContext();
        //    BillTestDBContextProcedures ptc = new BillTestDBContextProcedures(ct);
        //    try
        //    {
        //        clientUserInfo cred = new clientUserInfo();
        //        cred.userName = info.user;
        //        cred.sessionId = info.sessionId;
        //        cred.password = info.token;
        //        cred.groups = Request.HttpContext.Connection.RemoteIpAddress.ToString();




        //        if (checkCred(cred))
        //        {
        //            String clientID = info.data["clientID"].ToString();
        //            String server = info.data["server"].ToString();
        //            List<GetSpecificClientResult> clients = await ptc.GetSpecificClientAsync(new Guid(clientID));


        //            if (clients.Count == 0)
        //            {
        //                RetInfo ret2 = new RetInfo();
        //                ret2.result = "error";
        //                ret2.error = "no client found in GetDatabases";
        //                RetInfo[] retArr2 = { ret2 };
        //                return retArr2;
        //            }


        //            String location = clients[0].APILocation;


        //            MultipartFormDataContent content = new MultipartFormDataContent();
        //            content.Add(new StringContent(deploySecret), deploySecret);
        //            content.Add(new StringContent(server), server);


        //            HttpClient client = new HttpClient();
        //            var response = await client.PostAsync(location + "ClientDatabases", content);
        //            dynamic resp = await response.Content.ReadAsStringAsync();


        //            List<string> result = JsonConvert.DeserializeObject<List<string>>(resp);


        //            RetInfo ret = new RetInfo();
        //            ret.result = "success";
        //            ret.data = result;
        //            RetInfo[] retArr = { ret };
        //            return retArr;
        //        }
        //        else
        //        {
        //            RetInfo ret = new RetInfo();
        //            ret.result = "error";
        //            ret.data = "User Validation Error";
        //            RetInfo[] retArr = { ret };
        //            return retArr;
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        RetInfo err = new RetInfo();
        //        err.result = "error";
        //        err.extraData = ex.StackTrace;
        //        err.error = ex.Message;
        //        err.otherData = "GetDatabases";
        //        RetInfo[] retArr = { err };
        //        return retArr;
        //    }
        //}


        //[Route("ClientDatabases")]
        //[HttpPost]
        //public List<string> ClientDatabases()
        //{
        //    var header = Request.Form.Keys;
        //    var urls = header.OfType<string>().ToList();


        //    if (urls[0] == deploySecret)
        //    {
        //        try
        //        {
        //            string serverIn = urls[1];
        //            List<String> dict2 = new List<String>();


        //            SqlConnection connection = new SqlConnection("Data Source=" + serverIn + "; Integrated Security = True; TrustServerCertificate = True;");
        //            if (connection != null)
        //            {
        //                var cServer = new Server(new ServerConnection(connection));
        //                foreach (Microsoft.SqlServer.Management.Smo.Database db in cServer?.Databases)
        //                {
        //                    dict2.Add(db.Name.ToString());
        //                }
        //            }
        //            RetInfo ret = new RetInfo();
        //            ret.result = "success";
        //            ret.data = dict2;
        //            RetInfo[] retArr = { ret };
        //            return dict2;


        //        }
        //        catch (Exception ex)
        //        {
        //            List<string> errstring = new List<string>();
        //            errstring.Add(ex.Message);
        //            return errstring;
        //        }
        //    }
        //    else
        //    {
        //        List<string> errstring = new List<string>();
        //        return errstring;
        //    }
        //}




        [Route("GetDataServers")]
        [HttpPost]
        public async Task<RetInfo[]> GetDataServers([FromBody] GBSendInfo info)
        {
            try
            {
                BillTestDBContext ct = new BillTestDBContext();
                BillTestDBContextProcedures ptc = new BillTestDBContextProcedures(ct);


                clientUserInfo cred = new clientUserInfo();
                cred.userName = info.user;
                cred.sessionId = info.sessionId;
                cred.groups = Request.HttpContext.Connection.RemoteIpAddress.ToString();


                if (verify(cred))
                {
                    string clientID = info.data["clientID"].ToString();


                    Guid cID = new Guid(clientID);


                    //stored proceedure which outputs into dict
                    List<getClientServersResult> dict = await ptc.getClientServersAsync(cID);


                    if (dict.Count == 0)
                    {
                        getClientServersResult empty = new getClientServersResult();
                        empty.server = "no default";
                      //  empty.datab = "no default";
                        empty.clientID = cID;
                        dict.Add(empty);
                    }


                    RetInfo ret = new RetInfo();
                    ret.result = "success";
                    ret.data = dict;
                    RetInfo[] retArr = { ret };
                    return retArr;
                }
                else
                {
                    RetInfo ret = new RetInfo();
                    ret.result = "error";
                    ret.data = "User Validation Error";
                    RetInfo[] retArr = { ret };
                    return retArr;


                }
            }
            catch (Exception ex)
            {
                RetInfo err = new RetInfo();
                err.result = "error";
                err.extraData = ex.StackTrace;
                err.error = ex.Message;
                err.otherData = "GetDataServers";
                RetInfo[] retArr = { err };
                return retArr;
            }
        }


        [Route("CreateDataServers")]
        [HttpPost]
        public async Task<RetInfo[]> CreateDataServers([FromBody] GBSendInfo info)
        {
            try
            {
                BillTestDBContext ct = new BillTestDBContext();
                BillTestDBContextProcedures ptc = new BillTestDBContextProcedures(ct);


                clientUserInfo cred = new clientUserInfo();
                cred.userName = info.user;
                cred.sessionId = info.sessionId;
                cred.groups = Request.HttpContext.Connection.RemoteIpAddress.ToString();


                if (verify(cred))
                {
                    string clientID = info.data["clientID"].ToString();
                    Guid cID = new Guid(clientID);
                    string server = info.data["server"].ToString();
                    string database = info.data["database"].ToString();
                    string type = info.data["type"].ToString();


                    var userD = System.Convert.FromBase64String(cred.userName);
                    string userN = System.Text.Encoding.UTF8.GetString(userD);


                    dynamic dict = await ptc.insertDataServersAsync(cID, server, database, type, userN);


                    RetInfo ret = new RetInfo();
                    ret.result = "success";
                    ret.data = dict;
                    RetInfo[] retArr = { ret };
                    return retArr;


                }
                else
                {
                    RetInfo ret = new RetInfo();
                    ret.result = "error";
                    ret.data = "User Validation Error";
                    RetInfo[] retArr = { ret };
                    return retArr;


                }




            }
            catch (Exception ex)
            {
                RetInfo err = new RetInfo();
                err.result = "error";
                err.extraData = ex.StackTrace;
                err.error = ex.Message;
                err.otherData = "UpdateDataServers";
                RetInfo[] retArr = { err };
                return retArr;
            }
        }


        [Route("UpdateDataServers")]
        [HttpPost]
        public async Task<RetInfo[]> UpdateDataServers([FromBody] GBSendInfo info)
        {
            try
            {
                BillTestDBContext ct = new BillTestDBContext();
                BillTestDBContextProcedures ptc = new BillTestDBContextProcedures(ct);


                clientUserInfo cred = new clientUserInfo();
                cred.userName = info.user;
                cred.sessionId = info.sessionId;
                cred.groups = Request.HttpContext.Connection.RemoteIpAddress.ToString();


                if (verify(cred))
                {
                    string dsID = info.data["dsID"].ToString(); //ds for DataServer. (short for Database and Server)
                    Guid dID = new Guid(dsID);
                    string type = info.data["type"].ToString();
                    string status = info.data["status"].ToString();


                    var userD = System.Convert.FromBase64String(cred.userName);
                    string userN = System.Text.Encoding.UTF8.GetString(userD);


                    dynamic dict = await ptc.updateDataServersAsync(dID, type, status, userN);


                    RetInfo ret = new RetInfo();
                    ret.result = "success";
                    ret.data = dict;
                    RetInfo[] retArr = { ret };
                    return retArr;
                }
                else
                {
                    RetInfo ret = new RetInfo();
                    ret.result = "error";
                    ret.data = "User Validation Error";
                    RetInfo[] retArr = { ret };
                    return retArr;
                }
            }
            catch (Exception ex)
            {
                RetInfo err = new RetInfo();
                err.result = "error";
                err.extraData = ex.StackTrace;
                err.error = ex.Message;
                err.otherData = "UpdateDataServers";
                RetInfo[] retArr = { err };
                return retArr;
            }
        }


        [Route("GetClientEndpoints")]
        [HttpPost]
        public async Task<RetInfo[]> GetClientEndpoints([FromBody] GBSendInfo info)
        {
            try
            {
                clientUserInfo cred = new clientUserInfo();
                cred.userName = info.user;
                cred.sessionId = info.sessionId;
                cred.groups = Request.HttpContext.Connection.RemoteIpAddress.ToString();


                if (verify(cred))
                {
                    string clientID = info.data["clientID"].ToString();


                    Guid cID = new Guid(clientID);


                    send = new sendInfoBill();
                    send.parameters = new Dictionary<string, dynamic> { { "cmd", "" } };
                    send.u = System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes("richard.shirley"));
                    send.p = System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes("T0day92821!"));


                    send.parameters["cmd"] = $"select *, 'false' as delCheck from deployClientEndpoints dce where dce.clientid = '{cID}' and status = 'active'";


                    List<deployClientEndpoints> dict = await GetDataAsync<deployClientEndpoints>(theEndpoint, send);


                    Dictionary<string, List<string>> dict2 = new Dictionary<string, List<string>>();


                    if (dict.Count == 0)
                    {
                        deployClientEndpoints empty = new deployClientEndpoints();
                        empty.appPool = "no default";
                        empty.endpoint = "no default";
                        empty.clientID = cID;
                        // empty.delCheck = "false";
                        dict.Add(empty);
                    }


                    RetInfo ret = new RetInfo();
                    ret.result = "success";
                    ret.data = dict;
                    RetInfo[] retArr = { ret };
                    return retArr;
                }
                else
                {
                    RetInfo ret = new RetInfo();
                    ret.result = "error";
                    ret.data = "User Validation Error";
                    RetInfo[] retArr = { ret };
                    return retArr;


                }
            }
            catch (Exception ex)
            {
                RetInfo err = new RetInfo();
                err.result = "error";
                err.extraData = ex.StackTrace;
                err.error = ex.Message;
                err.otherData = "GetDataServers";
                RetInfo[] retArr = { err };
                return retArr;
            }
        }










        [Route("ScriptUpload")]
        [HttpPost]
        public async Task<RetInfo[]> ScriptUpload()
        {
            try
            {
                BillTestDBContext ct = new BillTestDBContext();
                BillTestDBContextProcedures ptc = new BillTestDBContextProcedures(ct);


                string Dir = Directory.GetCurrentDirectory();
                string mainFolder = Dir + "\\UploadedScripts\\";
                Directory.CreateDirectory(mainFolder);


                IFormFileCollection files = Request.Form.Files; //Putting a bereakpoint on this line will always cause an error. Otherwise it is fine.


                string scriptUser = Request.Form["scriptUser"];
                bool exRes;
                bool.TryParse(Request.Form["exRes"].ToString(), out exRes);
                //string scriptFolder = mainFolder + scriptName + '\\';
                //Directory.CreateDirectory(scriptFolder);
                foreach (var file in files)
                {


                    String scriptName = file.FileName;


                    using (var reader = new StreamReader(file.OpenReadStream()))
                    {
                        string content = reader.ReadToEnd();


                        string htmlString = Regex.Replace(content, "\\r\\n", "<br/>");
                        // htmlString = Regex.Replace(htmlString, "/******", " ");


                        dynamic dict = await ptc.createDeployScriptsAsync(scriptName, scriptUser, htmlString, exRes); //Add the script to SQL
                    }


                    string fullName = ContentDispositionHeaderValue.Parse(file.ContentDisposition).FileName.Trim().ToString();
                    FileInfo fi = new FileInfo(fullName);
                    string pathToSave = (mainFolder + file.FileName.ToString() + ""); //generate the save location of the file
                    long fileSize = file.Length;


                    using (var stream = new FileStream(pathToSave, FileMode.Create))
                    {
                        file.CopyTo(stream);
                    }
                }


                RetInfo ret = new RetInfo();
                ret.result = "success";
                //ret.data = dict;
                RetInfo[] retArr = { ret };
                return retArr;


            }
            catch (Exception ex)
            {
                RetInfo err = new RetInfo();
                err.result = "error";
                err.error = ex.Message;
                err.otherData = "scriptUpload";
                RetInfo[] retArr = { err };
                return retArr;
            }
        }




        [Route("ScriptMain")]
        [HttpPost]
        public async Task<RetInfo[]> ScriptMain([FromBody] GBSendInfo info)
        {


            dynamic val2 = DateTime.Now.ToString();
            System.IO.File.AppendAllText(@"c:\accel\richard.txt", $"{val2} I'm in Script Main. \r\n");


            try
            {
                List<RetInfo> result = null;
                RetInfo[]? exResult = null;
                clientUserInfo cred = new clientUserInfo();
                cred.userName = info.user;
                cred.sessionId = info.sessionId;
                cred.groups = Request.HttpContext.Connection.RemoteIpAddress.ToString();


                if (verify(cred))
                {


                    BillTestDBContext ct = new BillTestDBContext();
                    BillTestDBContextProcedures ptc = new BillTestDBContextProcedures(ct);




                    //new"Data Source=ACSRV2\\DB12;Initial Catalog=BillTestDB;Integrated Security=True; TrustServerCertificate=True;",
                    //This problably doesn't need to exist. The database and server strings just below make it vestigial. 
                    string scriptDB = "Data Source=" + info.data["server"].ToString() + ";Initial Catalog=" + info.data["database"] + ";Integrated Security=True; TrustServerCertificate=True;";


                    string database = info.data["database"].ToString();
                    string server = info.data["server"].ToString();




                    String scriptName = info.data["scriptName"].ToString();
                    String exRes = "false";
                    //String clientD = info.data["clientID"].ToString();


                    string[] clients = info.data["clientID"];
                    foreach (string cString in clients)
                    {




                        //Guid clientID = new Guid(clientD);
                        Guid clientID = new Guid(cString);
                        String location;
                        //location = "https://localhost:7083/deployment/";//||||TEMP DATA, DELETE THIS||||\\




                        string Dir = Directory.GetCurrentDirectory();
                        string mainFolder = Dir + "\\UploadedScripts\\";
                        String filePath = mainFolder + scriptName;


                        //Get the APILocation so that the script can be sent
                        List<GetSpecificClientResult> programs = await ptc.GetSpecificClientAsync(clientID);
                        //for each program returned
                        //get information from sql
                        location = programs[0].APILocation;




                        //Statements for scripts with Executable Results
                        List<getDeployScriptsResult> scripts = await ptc.getDeployScriptsAsync();


                        foreach (getDeployScriptsResult script in scripts) //checks if script has an executable result
                        {
                            if (script.scriptName.ToLower() == scriptName.ToLower() && script.executableResult.Value == true)
                            {
                                exRes = "true";
                                continue;
                            }
                        }
                        if (exRes.ToLower() == "true")//if script has executable result, executes that result
                        {


                            List<string> paths = new()
                            {
                                filePath,
                                "ACSRV2\\DB12",
                                "AccelV4" //Hardcoded for now
                            };
                            exResult = await ScriptExecute(paths, "yes");
                            System.IO.File.AppendAllText(@"c:\accel\richard.txt", $"{exResult[0].data} \r\n");
                            filePath = exResult[0].data;


                        }
                        MultipartFormDataContent content = new MultipartFormDataContent();
                        ByteArrayContent fileContent = new ByteArrayContent(System.IO.File.ReadAllBytes(filePath));
                        content.Add(fileContent, "file", filePath);
                        content.Add(new StringContent(scriptDB), scriptDB);// urls 0
                        content.Add(new StringContent(server), server); //urls[1]
                        content.Add(new StringContent(database), database); //urls[2]


                        HttpClient client = new HttpClient();
                        var response = await client.PostAsync(location + "scriptReceive", content);
                        string resp = await response.Content.ReadAsStringAsync();
                        result = JsonConvert.DeserializeObject<List<RetInfo>>(resp);


                        if (result[0].result == "success")
                        {
                            dynamic scID;
                            List<getDeployScriptsResult> names = await ptc.getDeployScriptsAsync();
                            foreach (getDeployScriptsResult name in names)
                            {
                                if (name.scriptName == scriptName)
                                {


                                    var userD = System.Convert.FromBase64String(cred.userName);
                                    string userN = System.Text.Encoding.UTF8.GetString(userD);


                                    scID = name.scriptID;
                                    List<updateDeployScriptsResult> dict = await ptc.updateDeployScriptsAsync(clientID, scID, userN);
                                    break;
                                }
                            }
                        }
                    }
                    RetInfo ret = new RetInfo();
                    if (result != null)
                    {
                        ret.result = result[0].result;
                        ret.data = result[0].data;
                        ret.error = result[0].error;
                    }
                    else
                    {
                        ret.result = "error";
                        ret.data = "Something went wrong";
                        ret.error = "Something went wrong";
                    }


                    System.IO.File.AppendAllText(@"c:\accel\richard.txt", $"{val2} Finished in Script Main. \r\n");
                    return new List<RetInfo>() { ret }.ToArray();


                }
                else
                {
                    RetInfo ret = new RetInfo();
                    ret.result = "error";
                    ret.data = "User Validation Error";
                    RetInfo[] retArr = { ret };
                    return retArr;
                }


            }
            catch (Exception ex)
            {
                System.IO.File.AppendAllText(@"c:\accel\richard.txt", $"{ex.Message} I errored in Script Main. \r\n");
                RetInfo err = new RetInfo();
                err.result = "error";
                err.otherData = "ScriptMain";
                err.error = ex.Message;
                return new List<RetInfo>() { err }.ToArray();
            }
        }




        [Route("ScriptReceive")]
        [HttpPost]
        public async Task<RetInfo[]> ScriptReceive()
        {
            dynamic val2 = DateTime.Now.ToString();
            System.IO.File.AppendAllText(@"c:\accel\richard.txt", $"{val2} I'm in Script Receive. \r\n");
            try
            {
                RetInfo[] dict = null;
                IFormFileCollection files = Request.Form.Files;
                var header = Request.Form.Keys;
                var urls = header.OfType<string>().ToList();


                string constring = urls[0];


                foreach (var zipFile in files)
                {
                    string fullName = ContentDispositionHeaderValue.Parse(zipFile.ContentDisposition).FileName.Trim().ToString();
                    FileInfo fi = new FileInfo(fullName);




                    String dir = Directory.GetCurrentDirectory();
                    String mainDir = dir + "\\DeployedScripts\\"; //destination subfolders?


                    if (!Directory.Exists(mainDir))
                    {
                        Directory.CreateDirectory(mainDir);
                    }


                    string pathToSave = (mainDir + fi.Name.Trim('"')); //generate the save location of the file //zipFile.FileName.ToString() + ""
                    //long fileSize = zipFile.Length;
                    using (var stream = new FileStream(pathToSave, FileMode.Create))
                    {
                        zipFile.CopyTo(stream);
                    }
                    //                   System.IO.File.AppendAllText(@"c:\accel\richard.txt", $"{zipFile.FileName} Is the Script. \r\n");


                    List<string> paths = new List<string>();
                    paths.Add(pathToSave); //[0]
                    paths.Add(constring); //[1]
                    paths.Add(urls[1].ToString()); //server [2]
                    paths.Add(urls[2].ToString()); //database [3]


                    dict = await ScriptExecute(paths, "no");
                    if (dict[0].error == null)
                    {
                        System.IO.File.Delete(pathToSave);
                    }


                }
                RetInfo ret = new RetInfo();
                ret.result = dict[0].result;
                ret.data = dict[0].data;
                ret.otherData = dict[0].otherData;
                ret.error = dict[0].error;
                RetInfo[] retArr = { ret };
                System.IO.File.AppendAllText(@"c:\accel\richard.txt", $"{val2} Finished in Script Receive. \r\n");
                return retArr;
            }
            catch (Exception ex)
            {
                System.IO.File.AppendAllText(@"c:\accel\richard.txt", $"{ex.Message} I errored in Script Receive. \r\n");
                RetInfo err = new RetInfo();
                err.result = "error";
                err.otherData = "ScriptReceive";
                err.error = ex.Message;
                return new List<RetInfo>() { err }.ToArray();
            }
        }








        private byte[] Encrypt(string plainText, string key)
        {
            try
            {
                byte[] inputArray = Convert.FromBase64String(plainText);
                plainText = System.Text.UTF8Encoding.UTF8.GetString(inputArray);
            }
            catch (CryptographicException ec)
            {


            }
            byte[] Key = UTF8Encoding.UTF8.GetBytes(key);
            byte[] IV = UTF8Encoding.UTF8.GetBytes(sKeyBase.Substring(0, 16));
            // Check arguments. 
            if (plainText == null || plainText.Length <= 0)
                return null;
            if (Key == null || Key.Length <= 0)
                return null;
            if (IV == null || IV.Length <= 0)
                return null;
            byte[] encrypted;
            using (Aes aesAlg = Aes.Create())
            {
                aesAlg.Key = Key;
                aesAlg.IV = IV;


                ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);
                using (MemoryStream msEncrypt = new MemoryStream())
                {
                    using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
                    {
                        using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))
                        {
                            //Write all data to the stream.
                            swEncrypt.Write(plainText);
                        }
                        encrypted = msEncrypt.ToArray();
                    }
                }
            }
            return encrypted;
        }
        private string Decrypt(byte[] pass, string key)
        {
            byte[] Key = UTF8Encoding.UTF8.GetBytes(key);
            byte[] IV = UTF8Encoding.UTF8.GetBytes(sKeyBase.Substring(0, 16));
            byte[] cipherText = pass;
            // Check arguments. 
            if (cipherText == null || cipherText.Length <= 0)
                return null;
            if (Key == null || Key.Length <= 0)
                return null;
            if (IV == null || IV.Length <= 0)
                return null;


            string plaintext = null;


            using (Aes aesAlg = Aes.Create())
            {
                aesAlg.Key = Key;
                aesAlg.IV = IV;


                ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);


                using (MemoryStream msDecrypt = new MemoryStream(cipherText))
                {
                    using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))
                    {
                        using (StreamReader srDecrypt = new StreamReader(csDecrypt))
                        {
                            plaintext = srDecrypt.ReadToEnd();
                        }
                    }
                }
            }
            return plaintext;
        }






        // This is how you add a Context - all of the connection strings will be the same model in this case but you will need one of these for each
        // builder.Services.AddDbContext<AccelTraxV5Rest.EFModels.AccelV4ContextSP>(opt =>
        // {
        //      opt.UseSqlServer(cfg.GetConnectionString("MyConnStr"));
        //      #if DEBUG
        //          opt.EnableSensitiveDataLogging();
        //      #endif
        // });








        private async Task<List<T>> GetDataAsync<T>(string endPoint, sendInfoBill send)
        {
            dynamic theError = null;
            List<T> rResult = null;
            int ntry = 3;


            while (true)
            {
                string infoSent = JsonConvert.SerializeObject(send);
                StringContent stringContent = new StringContent(infoSent, Encoding.UTF8, "application/json");


                using (var client = new HttpClient())
                {
                    try
                    {
                        client.DefaultRequestHeaders.Add("Access-Control-Allow-Origin", "*");
                        //client.DefaultRequestHeaders.Add("AccelKey", "1e02b967-589a-4d31-bbe8-739e4f74c36d");


                        client.Timeout = TimeSpan.FromMinutes(6);
                        var res = await client.PostAsync(endPoint, stringContent);
                        if (res != null)
                        {
                            string result = await res.Content.ReadAsStringAsync();
                            RetInfo[] retData = JsonConvert.DeserializeObject<RetInfo[]>(result);
                            if (retData[0].error != null && retData[0].error != "No data returned")
                            {
                                theError = retData[0].error;
                                break;
                            }
                            else
                            {
                                rResult = JsonConvert.DeserializeObject<List<T>>(retData[0].data.ToString());
                                break;
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        if (ntry-- <= 0)
                        {
                            theError = ex.Message;
                            return null;
                        }
                    }
                }
            }
            return rResult;




        }


        dynamic theError;
        private async Task<string> QueryAsync(string endPoint, sendInfoBill send)
        {
            theError = null;
            string rResult = null;
            string infoSent = JsonConvert.SerializeObject(send);
            StringContent stringContent = new StringContent(infoSent, Encoding.UTF8, "application/json");
            using (var client = new HttpClient())
            {
                var res = await client.PostAsync(endPoint, stringContent);
                if (res != null)
                {
                    string result = await res.Content.ReadAsStringAsync();
                    RetInfo[] retData = JsonConvert.DeserializeObject<RetInfo[]>(result);
                    if (retData[0].error != null)
                    {
                        theError = retData[0].error;
                    }
                    else
                        rResult = retData[0].data.ToString();
                }
            }


            return rResult;
        }




    }






    public class sendInfoBill
    {
        public string u { set; get; }


        public string p { set; get; }


        public Dictionary<string, dynamic> parameters { set; get; }
    }


    public class ClientProgram : deployClients
    {
        public List<getProgramsByClientResult>? programList { get; set; }
    }




    public class RetInfo
    {
        public string? result { get; set; }
        public string? error { get; set; }
        public dynamic? otherData { get; set; }
        public dynamic? extraData { get; set; }
        public dynamic? data { get; set; }
    }


    public class UploadOptions
    {
        public List<clientOptions> clients { get; set; }
        public Guid programID { get; set; }
        public Guid? packageID { get; set; }
        public List<PackageContent> GridData { get; set; }
       
    }


    public class UploadFourth
    {
       
      public Guid? packageID { get; set; }
      public string GridData { get; set; } //stringified List<KeyValueTemp>


    }


    public class KeyValueTemp
    {
       public PackageContent key { get; set; }
       public List<KeyValue> value { get; set; } //clientID as key, dynamic resource as value




    }


    public class KeyValue
    {
        public string key { get; set; }
        public string value { get; set; }
    }
    public class UploadThird
    {
        public List<PackageContent> GridData { get; set; }
        public Guid? packageID {  set; get; }
        public ProgramClient programInfo { get; set; }
        
    }


    public class ProgramClient
    {
        public deployPrograms program { get; set; }
        public List<clientOptions> clientList { get; set; }
    }


    public class clientOptions : deployClients
    {
      // public Guid clientID { get; set; }
      //public string? clientName { get; set; }
        public string? appPool { get; set; }
        public string? server { get; set; }
        public string? database { get; set; }
        public string? endpoint { get; set; }
       // public List<deployPrograms> programList { get; set; }
        
    }
    public class clientResponse : clientOptions
    {
        public List<deployServers> serverSuggestions { get; set; }
        public List<deployDatabases> databaseSuggestions { get; set; }
        public List<appPoolData> appPoolSuggestions { get; set; }
    }


    public class CheckRunResult
    {
        public bool validated { get; set; }
        public List<clientResponse> clients { get; set; }


    }


    public class CRRSecond
    {
        public bool validated { get; set; }
        public Dictionary<string,List<string>> reqRowClients { get; set; }
    }




    public class UploadData
    {
        public string location { get; set; }
        public MultipartFormDataContent content { get; set; }


    }


    public class ResourceData
    {
        public string? value { get; set; }
        public string? dict_id { get; set; }
        public List<string> clients { get; set; }
        public string? resourceName { get; set; }
        public string? resourceType { get; set; }
    }




    public class filePackageData
    {
        public int? fileCount { get; set; }
        public int? countReceived { get; set; } = 1;
        public string? batchPath { get; set; }
        public List<DeployFilesBatch> files { get; set; }
        public List<DeployPackageContentBatch> packages { get; set; }
        public filePackageData()
        {
            files = new List<DeployFilesBatch>();
            packages = new List<DeployPackageContentBatch>();
        }


    }


    public class SendInfo
    {
        public string user { get; set; }
        public string sessionId { get; set; }
        public Dictionary<string, string> data { get; set; }
    }


    public class GBSendInfo
    {
        public string user { get; set; }
        public string sessionId { get; set; }
        //  public string token { get; set; }
        public Dictionary<string, dynamic> data { get; set; }
    }


    public class TokSendInfo
    {
        public string user { get; set; }
        public string sessionId { get; set; }
        public string token { get; set; }
        public Dictionary<string, dynamic> data { get; set; }
    }


    public class userInfo
    {
        public Guid? sessionId { get; set; }
        public string user { get; set; }
        public DateTime _timeStamp { get; set; }
        public Guid? token { get; set; }
        public string access { get; set; }
        public byte[] sec_pass { get; set; }
        public string address { get; set; }
        public Guid? employeeId { get; set; }
    }


    public class clientUserInfo
    {
        public string userName { get; set; }
        public string sessionId { get; set; }
        public string password { get; set; }
        public string groups { get; set; }
    }


    public class appPoolData
    {
        public string poolName { get; set; }
        public string Status { get; set; }
    }


    public class ActionTypeData
    {
        public string type { get; set; }
        public string action { get; set; }
        public Guid id { get; set; }
    }
    public class ProgramClientsData
    {
        public string clientName { get; set; }
        public Guid clientID { get; set; }
        public string endpoint { get; set; }
        public string server { get; set; }
        public string databaseName { get; set; }
        public string ApiLocation { get; set; }
    }


    public class PackageContent
    {
        public string? itemID { get; set; }
        public string? fileName { get; set; }
        public string? actionTypeID { get; set; }
        public string? actionCommand { get; set; }
        public string? actionType { get; set; }
        public string? rowID { get; set; }
        public string? resourceDictID { get; set; }




    }
}


namespace globalClass
{
    public class ResourceInfo
    {
        public Guid id { get; set; } //deploy_resource ID
        public Guid client_id { get; set; }
        public Guid dict_id { get; set; }
        public string value { get; set; }
        public DateTime? cdate { get; set; }
        public string? cuser { get; set; }
        public DateTime? mdate { get; set; }
        public string? muser { get; set; }
        public string? status { get; set; }
        public string? resource_name { get; set; }
        public Guid type_id { get; set; }
        public string? resource_type { get; set; }
    }
}
________________